name: OpenFaaS AMQP 1.0 Connector

env:
  APP_DIR: openfaas-amqp1.0-connector
  APP_NAME: openfaas-amqp1.0-connector
  RELEASE_BRANCH: master

defaults:
  run:
    working-directory: packages/openfaas-amqp1.0-connector

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - develop
      - 'feature/**'
      - 'fix/**'
      - 'subtask/**'
    paths:
      - packages/openfaas-amqp1.0-connector/**/*

jobs:
  build:
    runs-on: ubuntu-latest
    if: "! contains(toJSON(github.event.commits.*.message), '[ci skip]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: Setup NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - run: npm ci

      - uses: ./.github/actions/flux

      - name: Get next version number
        uses: ./.github/actions/semantic-release
        id: version_number
        with:
          DIR: packages/${{ env.APP_DIR }}
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          GET_VERSION: 'true'

      - name: Exit if no git tag was created
        if: ${{ steps.version_number.outputs.new_release_published == 'true' }}
        run: |
          echo "Info: Check if a git tag has been created for the new version."
          NEW_VERSION=${{ steps.version_number.outputs.new_release_version_number }}
          if [[ "$NEW_VERSION" == "" ]]
          then
            echo "Error: NEW_VERSION should not be blank."
            exit 1
          fi

          if (git tag --points-at HEAD | grep "$NEW_VERSION" &>/dev/null)
          then
            echo "Info: git tag exists for version: $NEW_VERSION"
          else
            echo "Error: git tag does not exist for version: $NEW_VERSION"
            exit 1
          fi

      - name: Extract variables
        id: vars
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "::set-output name=branch::$BRANCH"

          CLEAN_TAG=$(echo $BRANCH | tr "/" "-")
          DOCKER_TAG=$CLEAN_TAG
          [ "$CLEAN_TAG" == "$RELEASE_BRANCH" ] && DOCKER_TAG=latest

          echo "::set-output name=docker-tag::$DOCKER_TAG"

          NEW_RELEASE_VERSION=${{ steps.version_number.outputs.new_release_version_number }}
          [ "${{ steps.version_number.outputs.new_release_published }}" == "false" ] && NEW_RELEASE_VERSION="$DOCKER_TAG-dev"

          echo "::set-output name=new_version::$NEW_RELEASE_VERSION"

      - name: Next version
        run: echo ${{ steps.vars.outputs.new_version }}

      - run: npm run lint

      - run: npm run build

      - name: Build Docker tagged image
        uses: ./.github/actions/docker
        with:
          APP_DIR: packages/${{ env.APP_DIR }}
          APP_NAME: ${{ env.APP_NAME }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_TAG: ${{ steps.vars.outputs.docker-tag }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          VERSION: ${{ steps.vars.outputs.new_version }}

      - name: Build Docker versioned image
        uses: ./.github/actions/docker
        if: ${{ steps.version_number.outputs.new_release_published == 'true' }}
        with:
          APP_DIR: packages/${{ env.APP_DIR }}
          APP_NAME: ${{ env.APP_NAME }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_TAG: ${{ steps.version_number.outputs.new_release_version_number  }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          VERSION: ${{ steps.vars.outputs.new_version }}
