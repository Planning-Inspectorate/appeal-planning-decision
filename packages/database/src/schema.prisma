generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("SQL_CONNECTION_STRING_ADMIN")
}

// NOTES
//
// use '//' comments for notes relevant to the schema
// use '///' comments for notes that should be included in the types definition
// see https://www.prisma.io/docs/concepts/components/prisma-schema#comments
//
// we use GUIDs for IDs (see https://learn.microsoft.com/en-us/sql/t-sql/data-types/uniqueidentifier-transact-sql?view=sql-server-ver16)
// this is because these IDs may be used in URLs and it makes them harder to guess
// while we don't rely on that for security, it adds an extra layer
// not everything needs this, but easier to make them all consistent and the increase in size (vs int) is negligible

/// Oidc represents an grant from the auth server
model Oidc {
  id         String    @id
  type       Int
  /// json string
  payload    String    @db.NVarChar(MAX)
  grantId    String?
  userCode   String?
  uid        String?
  expiresAt  DateTime?
  consumedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([id, type])
}

/// AppealUser represents a user of our service(s)
/// this may be an appellant, agent, or LPA employee
model AppealUser {
  id         String  @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  email      String  @unique
  /// has this user been enrolled?
  /// in practice this means have they been sent a registration confirmation email
  /// this is sent to all users when they first use the system
  ///
  /// this flag is here for users created as part of migration, or from a back office ServiceUser message
  /// they need an email sent when they first login
  isEnrolled Boolean @default(false)

  /// a service user entity will be broadcast by the back office. We match them to AppealUser by email
  /// appeals will be matched to users by serviceUserId.
  serviceUserId Int? // unique, with nulls allowed, is enforced in SQL, see first migration script & https://stackoverflow.com/a/767702
  // -- unique AppealUser.serviceUserId
  // CREATE UNIQUE NONCLUSTERED INDEX idx_AppealUser_serviceUserId_unique_notnull
  // ON [dbo].[AppealUser](serviceUserId)
  // WHERE serviceUserId IS NOT NULL;

  // LPA user fields
  /// is this an LPA user?
  isLpaUser  Boolean  @default(false)
  /// if an LPA user, the LPA this user belongs to
  lpaCode    String?
  /// if an LPA user, whether this user is an admin for that LPA
  isLpaAdmin Boolean?
  /// if an LPA user, the status of this user, e.g. have they logged in and confirmed their email?
  lpaStatus  String? /// added | confirmed | removed

  /// appeals this user is linked to, by being the appellant or agent, for example
  Appeals AppealToUser[]

  Rule6Parties Rule6Party[]

  /// a security token this user can use to access our service(s)
  SecurityToken SecurityToken?
}

/// SecurityToken is used as a mechanism for users to login
/// They enter their email, a token is generated, emailed to the user, and they enter it to login
/// A user only ever has one token, which gets updated when a new token is required
model SecurityToken {
  id String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier

  /// link to a user
  appealUserId String     @unique @db.UniqueIdentifier
  AppealUser   AppealUser @relation(fields: [appealUserId], references: [id])

  /// the generated token the user can login with
  token            String
  /// the time the token was generated, used for checking token expiry
  tokenGeneratedAt DateTime
  /// the number of attempts at entering the code since this token was last generated
  /// this MUST be updated in a transaction to ensure atomic operation
  /// see https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#atomic-number-operations
  attempts         Int      @default(0)
  /// the action the code was generated for, e.g. confirmEmail
  action           String?
}

/// Appeal is the base appeal model, used to link references to other entities, which includes, for example:
/// - an appeal submission authored in the front office
/// - a case published by the back office
/// - an LPA questionnaire submission
model Appeal {
  id String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier

  /// users linked to this appeal, such as the appellant or agent
  Users AppealToUser[]

  /// reference to an appeal submission in the Cosmos DB `appeals` collection
  /// we sync across two properties, as below
  /// this is so we can query for draft submissions where the deadline date has passed (to delete them)
  legacyAppealSubmissionId           String?
  /// the deadline date of the appeal submission in the Cosmos DB `appeals` collection
  legacyAppealSubmissionDecisionDate DateTime?
  /// the state of the appeal submission in the Cosmos DB `appeals` collection
  legacyAppealSubmissionState        String? /// DRAFT || SUBMITTED

  /// link to case (from Back Office)
  AppealCase AppealCase?

  AppellantSubmission AppellantSubmission?

  // todo: in the future link to appeal submission and other data
}

/// AppealToUser represents the relationships between AppealUser and Appeal
/// This is a many-to-many relationship.
model AppealToUser {
  /// relation to an Appeal
  appealId   String     @db.UniqueIdentifier
  Appeal     Appeal     @relation(fields: [appealId], references: [id])
  /// relation to a User
  userId     String     @db.UniqueIdentifier
  AppealUser AppealUser @relation(fields: [userId], references: [id])

  /// the role the user has in relation to the appeal
  /// must be an AppealToUserRole name value
  role String
  Role AppealToUserRole @relation(fields: [role], references: [name])

  @@id([appealId, userId])
}

/// AppealToUserRole represents the role a user has in relation to an Appeal
/// This reference table acts as an enum of allowed values
model AppealToUserRole {
  /// the unique name of this role such as appellant, agent, interestedParty
  /// this is a machine-readable name not a user-friendly name; i.e. lowerCamelCase
  name        String  @id
  /// the description for this role, such as
  /// "an agent is a user who submits an appeal on behalf of an appellant"
  description String?

  AppealToUser AppealToUser[]
}

/// AppealCase represents an Appeal from the Back Office, and follows the PINS Data Model
/// Cases aren't linked to users directly, but there's a 1:1 mapping to Appeal, which has a link to user
// NOTE: field names match the model rather than the usual camelCase. This avoids extra mapping.
model AppealCase {
  /// this ID is for front office only and won't correlate to other systems
  id String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier

  //***************************************************************************
  // general fields
  //***************************************************************************

  /// unique case reference
  caseReference String @unique
  LPACode       String

  //***************************************************************************
  // appellant case fields
  //***************************************************************************

  LPAName                         String
  appealTypeCode                  String // type shortcode such as HAS or S78
  appealTypeName                  String // type name such as Householder or Full Planning
  decision                        String
  originalCaseDecisionDate        DateTime
  costsAppliedForIndicator        Boolean
  LPAApplicationReference         String
  appellantCasePublished          Boolean  @default(false)
  appellantProofEvidenceSubmitted Boolean  @default(false)
  appellantProofEvidencePublished Boolean  @default(false)
  appellantFinalCommentsSubmitted Boolean  @default(false)

  appellantFirstName String @default("")
  appellantLastName  String @default("")

  siteAddressLine1    String
  siteAddressLine2    String?
  siteAddressTown     String?
  siteAddressCounty   String?
  siteAddressPostcode String

  //***************************************************************************
  // LPA questionnaire fields
  //***************************************************************************

  questionnaireDueDate  DateTime?
  questionnaireReceived DateTime?

  lpaQuestionnairePublished    Boolean  @default(false)
  lpaQuestionnaireSubmitted    Boolean  @default(false)
  doesAffectAScheduledMonument Boolean?
  lpaStatementPublished        Boolean  @default(false)
  lpaProofEvidenceSubmitted    Boolean  @default(false)
  lpaProofEvidencePublished    Boolean  @default(false)
  lpaFinalCommentsPublished    Boolean  @default(false)

  // Published questionnaire details
  correctAppealType               Boolean?
  changesListedBuilding           Boolean?
  changedListedBuildingNumber     Int?
  addChangedListedBuilding        Boolean?
  affectsListedBuilding           Boolean?
  affectedListedBuildingNumber    Int?
  addAffectedListedBuilding       Boolean?
  scheduledMonument               Boolean?
  conservationArea                Boolean?
  uploadConservation              Boolean?
  protectedSpecies                Boolean?
  greenBelt                       Boolean?
  areaOutstandingBeauty           Boolean?
  designatedSites                 String?
  otherDesignationDetails         String?
  treePreservationOrder           Boolean?
  uploadTreePreservationOrder     Boolean?
  gypsyTraveller                  Boolean?
  publicRightOfWay                Boolean?
  uploadDefinitiveMapStatement    Boolean?
  environmentalImpactSchedule     String?
  developmentDescription          String?
  sensitiveArea                   Boolean?
  sensitiveAreaDetails            String?
  columnTwoThreshold              Boolean?
  screeningOpinion                Boolean?
  uploadScreeningOpinion          Boolean?
  requiresEnvironmentalStatement  Boolean?
  uploadScreeningDirection        Boolean?
  uploadEnvironmentalStatement    Boolean?
  completedEnvironmentalStatement Boolean?
  uploadWhoNotified               Boolean?
  notificationMethod              String?
  uploadSiteNotice                Boolean?
  uploadLettersEmails             Boolean?
  uploadPressAdvert               Boolean?
  statutoryConsultees             Boolean?
  consultedBodiesDetails          String?
  consultationResponses           Boolean?
  uploadConsultationResponses     Boolean?
  otherPartyRepresentations       Boolean?
  uploadRepresentations           Boolean?
  uploadPlanningOfficerReport     Boolean?
  uploadDevelopmentPlanPolicies   Boolean?
  emergingPlan                    Boolean?
  uploadEmergingPlan              Boolean?
  uploadOtherPolicies             Boolean?
  supplementaryPlanningDocs       Boolean?
  uploadSupplementaryPlanningDocs Boolean?
  infrastructureLevy              Boolean?
  uploadInfrastructureLevy        Boolean?
  infrastructureLevyAdopted       Boolean?
  infrastructureLevyAdoptedDate   DateTime?
  infrastructureLevyExpectedDate  DateTime?
  lpaSiteAccess                   Boolean?
  lpaSiteAccessDetails            String?
  neighbouringSiteAccess          Boolean?
  neighbouringSiteAccessDetails   String?
  addNeighbouringSiteAccess       Boolean?
  lpaSiteSafetyRisks              Boolean?
  lpaSiteSafetyRiskDetails        String?
  lpaProcedurePreference          String?
  lpaPreferHearingDetails         String?
  lpaPreferInquiryDuration        String?
  lpaPreferInquiryDetails         String?
  nearbyAppeals                   Boolean?
  nearbyAppealReference           String?
  addNearbyAppeal                 Boolean?
  newConditions                   Boolean?
  newConditionDetails             String?
  lpaStatement                    String?
  lpaStatementDocuments           Boolean?
  uploadLpaStatementDocuments     Boolean?
  lpaFinalComment                 Boolean?
  lpaFinalCommentDetails          String?
  uploadLpaProofEvidence          Boolean?
  lpaWitnesses                    Boolean?
  uploadLpaWitnessEvidence        Boolean?
  uploadLpaWitnessTimings         Boolean?
  uploadLpaRebuttal               Boolean?

  //***************************************************************************
  // rule 6 fields
  //***************************************************************************

  rule6StatementPublished      Boolean @default(false)
  rule6ProofsEvidencePublished Boolean @default(false)

  // Rule 6 parties related to the appeal
  Rule6Parties Rule6Party[]

  //***************************************************************************
  // interested party fields
  //***************************************************************************

  interestedPartyCommentsPublished Boolean @default(false)

  //***************************************************************************
  // case dates
  //***************************************************************************

  casePublished     Boolean   @default(false)
  casePublishedDate DateTime?

  receiptDate                DateTime?
  startDate                  DateTime?
  appealValidDate            DateTime?
  caseDecisionDate           DateTime?
  interestedPartyRepsDueDate DateTime?

  // statement
  statementDueDate            DateTime?
  appellantStatementForwarded DateTime?
  appellantStatementSubmitted DateTime?
  LPAStatementForwarded       DateTime?
  LPAStatementSubmitted       DateTime?

  // comments
  finalCommentsDueDate       DateTime?
  appellantCommentsForwarded DateTime?
  appellantCommentsSubmitted DateTime?
  LPACommentsForwarded       DateTime?
  LPACommentsSubmitted       DateTime?

  // proofs of evidence
  proofsOfEvidenceDueDate   DateTime?
  appellantsProofsForwarded DateTime?
  appellantsProofsSubmitted DateTime?
  LPAProofsForwarded        DateTime?
  LPAProofsSubmitted        DateTime?

  // viewAppeal epic aapd-1187
  procedure             String?
  outcome               String?
  caseDecisionOutcome   String?
  caseDecisionPublished Boolean? @default(false)

  // appeal details
  yourFirstName   String?
  yourLastName    String?
  yourCompanyName String?

  ownsAllLand      Boolean?
  ownsSomeLand     Boolean?
  knowsOtherOwners Boolean?
  identifiedOwners Boolean?
  advertisedAppeal Boolean?
  informedOwners   Boolean?

  agriculturalHolding                Boolean?
  tenantAgriculturalHolding          Boolean?
  otherTenantsAgriculturalHolding    Boolean?
  informedTenantsAgriculturalHolding Boolean?

  appellantSiteAccess        Boolean?
  appellantSiteAccessDetails String?
  appellantSiteSafety        Boolean?
  appellantSiteSafetyDetails String?

  appellantProcedurePreference  String?
  appellantPreferHearingDetails String?
  appellantPreferInquiryDetails String?

  // questions relating to appeal documents (aapd-1126)

  updateDevelopmentDescription  Boolean?
  developmentDescriptionDetails String?
  statusPlanningObligation      String?

  // todo: there are many more fields! waiting on the model definition

  /// link to root Appeal
  appealId String @unique @db.UniqueIdentifier
  Appeal   Appeal @relation(fields: [appealId], references: [id])

  // Docs reference
  Documents Document[]

  // Neighbour address reference
  NeighbouringAddresses NeighbouringAddress[]

  // todo: indexes

  // Questionnaires linked to this appeal case
  LPAQuestionnaireSubmission LPAQuestionnaireSubmission?
}

model NeighbouringAddress {
  id String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier

  addressLine1 String
  addressLine2 String?
  townCity     String
  postcode     String

  // relations
  caseReference String
  AppealCase    AppealCase @relation(fields: [caseReference], references: [caseReference])
}

/// Document represents a document from the Back Office, and follows the PINS Data Model
/// todo: linked to an appeal?
// NOTE: field names match the model rather than the usual camelCase. This avoids extra mapping.
model Document {
  id String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier

  // file info
  filename         String
  originalFilename String
  size             Int
  mime             String
  documentURI      String

  // dates
  dateCreated  DateTime
  dateReceived DateTime?
  lastModified DateTime?

  // states
  virusCheckStatus String? // nullble?
  published        Boolean @default(false)
  redacted         Boolean @default(false)

  // info
  documentType String
  sourceSystem String
  origin       String
  stage        String

  // relations
  caseReference String
  AppealCase    AppealCase @relation(fields: [caseReference], references: [caseReference])
}

/// ServiceUser represents any user of PINS Services, and follows the PINS Data Model
/// A given person may be represented by multiple ServiceUser entries, for example an agent
/// would have one entry per appeal
///
/// NOTE: ServiceUser should not be used for general queries, use AppealUser and AppealToUser
/// this just exists so we can create the relationships in our model, from Back Office data - which may come out of order
/// we may get an AppealCase before associated ServiceUsers, and visa versa. So we save them to reconcile afterwards.
model ServiceUser {
  /// this ID is for front office only and won't correlate to other systems
  internalId String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier

  id              String
  salutation      String?
  firstName       String?
  lastName        String?
  emailAddress    String?
  /// one of "Applicant", "Appellant", "Agent", "RepresentationContact", "Subscriber"
  serviceUserType String
  /// case reference this user + user-type relates to
  caseReference   String
}

model AppellantSubmission {
  id             String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  LPACode        String
  appealTypeCode String // type shortcode such as HAS or S78
  appealId       String @unique @db.UniqueIdentifier
  Appeal         Appeal @relation(fields: [appealId], references: [id])
}

/// LPAQuestionnaireSubmission represents the questionnaire responses from an LPAUser
model LPAQuestionnaireSubmission {
  id String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier

  appealCaseReference String     @unique
  AppealCase          AppealCase @relation(fields: [appealCaseReference], references: [caseReference])

  // link the submission to the appeal

  correctAppealType                               Boolean?
  affectsListedBuilding                           Boolean?
  affectedListedBuildingNumber                    String?
  addAffectedListedBuilding                       Boolean?
  changesListedBuilding                           Boolean?
  changedListedBuildingNumber                     String?
  addChangedListedBuilding                        Boolean?
  conservationArea                                Boolean?
  uploadConservation                              Boolean?
  greenBelt                                       Boolean?
  uploadWhoNotified                               Boolean?
  displaySiteNotice                               Boolean?
  lettersToNeighbours                             Boolean?
  uploadLettersEmails                             Boolean?
  pressAdvert                                     Boolean?
  uploadPressAdvert                               Boolean?
  consultationResponses                           Boolean?
  uploadConsultationResponses                     Boolean?
  notificationMethod                              String?
  uploadSiteNotice                                Boolean?
  otherPartyRepresentations                       Boolean?
  uploadRepresentations                           Boolean?
  uploadPlanningOfficerReport                     Boolean?
  lpaSiteAccess                                   String?
  lpaSiteAccess_lpaSiteAccessDetails              String?
  neighbourSiteAccess                             String?
  neighbourSiteAccess_neighbourSiteAccessDetails  String?
  addNeighbourSiteAccess                          Boolean?
  neighbourSiteAddress                            Boolean?
  lpaSiteSafetyRisks                              String?
  lpaSiteSafetyRisks_lpaSiteSafetyRiskDetails     String?
  lpaProcedurePreference                          String?
  lpaPreferHearingDetails                         String?
  lpaProcedurePreference_lpaPreferInquiryDuration String?
  lpaPreferInquiryDetails                         String?
  nearbyAppeals                                   Boolean?
  nearbyAppealReference                           String?
  addNearbyAppeal                                 Boolean?
  newConditions                                   String?
  newConditions_newConditionDetails               String?
  emergingPlan                                    Boolean?
  uploadEmergingPlan                              Boolean?
  uploadDevelopmentPlanPolicies                   Boolean?
  uploadOtherPolicies                             Boolean?
  infrastructureLevy                              Boolean?
  uploadInfrastructureLevy                        Boolean?
  infrastructureLevyAdopted                       Boolean?
  infrastructureLevyAdoptedDate                   DateTime?
  infrastructureLevyExpectedDate                  DateTime?
  uploadLettersInterestedParties                  Boolean?
  treePreservationOrder                           Boolean?
  uploadTreePreservationOrder                     Boolean?
  uploadDefinitiveMapStatement                    Boolean?
  supplementaryPlanningDocs                       Boolean?
  uploadSupplementaryPlanningDocs                 Boolean?
  affectsScheduledMonument                        Boolean?
  gypsyTraveller                                  Boolean?
  statutoryConsultees                             String?
  statutoryConsultees_consultedBodiesDetails      String?
  protectedSpecies                                Boolean?
  publicRightOfWay                                Boolean?
  areaOutstandingBeauty                           Boolean?
  designatedSites                                 String?
  designatedSites_otherDesignations               String?
  screeningOpinion                                Boolean?
  environmentalStatement                          Boolean?
  environmentalImpactSchedule                     String?
  uploadEnvironmentalStatement                    Boolean?
  columnTwoThreshold                              Boolean?
  sensitiveArea                                   String?
  sensitiveArea_sensitiveAreaDetails              String?
  uploadScreeningOpinion                          Boolean?
  uploadScreeningDirection                        Boolean?
  developmentDescription                          String?
  requiresEnvironmentalStatement                  String?

  // Uploaded documents and details linked to this appeal
  SubmissionDocumentUpload SubmissionDocumentUpload[]
  SubmissionAddress        SubmissionAddress[]
}

model SubmissionDocumentUpload {
  id String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier

  questionnaireId            String                     @db.UniqueIdentifier
  LPAQuestionnaireSubmission LPAQuestionnaireSubmission @relation(fields: [questionnaireId], references: [id])

  name             String
  fileName         String
  originalFileName String
  location         String
  type             String
  storageId        String @default("")
}

model SubmissionAddress {
  id String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier

  questionnaireId            String                     @db.UniqueIdentifier
  LPAQuestionnaireSubmission LPAQuestionnaireSubmission @relation(fields: [questionnaireId], references: [id])

  addressLine1 String
  addressLine2 String?
  townCity     String
  postcode     String

  // the fieldName of the questionnaire question / subquestion - required for display filtering
  fieldName String
}

model Rule6Party {
  id                                 String    @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  caseReference                      String
  firstName                          String
  lastName                           String
  over18                             Boolean
  partyName                          String
  partyEmail                         String
  addressLine1                       String
  addressLine2                       String?
  addressTown                        String?
  addressCounty                      String?
  addressPostcode                    String?
  partyStatus                        String
  proofEvidenceSubmitted             Boolean
  proofEvidenceSubmittedDate         DateTime?
  proofEvidenceReceived              Boolean
  proofEvidenceReceivedDate          DateTime?
  proofEvidenceValidationOutcome     String?
  proofEvidenceValidationOutcomeDate DateTime?
  proofEvidenceValidationDetails     String?
  statementDocuments                 Boolean
  witnesses                          Boolean
  statementSubmitted                 Boolean
  statementSubmittedDate             DateTime?
  statementReceived                  Boolean
  statementReceivedDate              DateTime?
  statementValidationOutcome         String?
  statementValidationOutcomeDate     DateTime?
  statementValidationDetails         String?

  // Link to AppealUser
  appealUserId String     @db.UniqueIdentifier
  AppealUser   AppealUser @relation(fields: [appealUserId], references: [id])

  //Optional link to AppealCase
  AppealCase AppealCase? @relation(fields: [caseReference], references: [caseReference])
}
