# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - feature/*
      - fix/*
      - subtask/*
      - master
  paths:
    include:
      - packages/pdf-service-api

resources:
  - repo: self

name: '0.0.0' # set dynamically below in a task

variables:
  # VERSION INFO ----------------------------------------------------------
  version.MajorMinor: '1.0' # Manually adjust the version number as needed for semantic versioning. Revision is auto-incremented.
  version.Revision: $[counter(variables['version.MajorMinor'], 0)]
  versionNumber: '$(version.MajorMinor).$(version.Revision)'
  # -----------------------------------------------------------------------

  # Container registry service connection established during pipeline creation
  pdfServiceApiWebAppDockerfilePath: '$(Build.SourcesDirectory)/packages/pdf-service-api/Dockerfile'
  imageRepository: 'pdf-service-api'
  containerRegistry: 'pinscommonukscontainers3887default.azurecr.io'
  dockerRegistryServiceConnection: 'appeals-service-api-registry-connection' ## this needs renamed
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Increment_Version
    displayName: Increment Version Number
    jobs:
      - job: Set_Version
        displayName: Set Version Number
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: PowerShell@2
            displayName: Set the name of the build (i.e. the Build.BuildNumber)
            inputs:
              targetType: 'inline'
              script: |
                [string] $buildName = "$(versionNumber)_$(Build.BuildId)"
                Write-Host "Setting the name of the build to '$buildName'."
                Write-Host "##vso[build.updatebuildnumber]$buildName"

  - stage: Build_and_Push_PDF_Service_API
    displayName: Build, Test and Push PDF Service API
    jobs:
      - job: Build_Test_Push_PDF_Service_API
        displayName: Build PDF Service API
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and Test Image
            inputs:
              command: build
              repository: $(imageRepository)
              dockerfile: $(pdfServiceApiWebAppDockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              arguments: >
                --build-arg APP_NAME=pdf-service-api
                --build-arg BUILD_ID=$(Build.BuildNumber)
                --build-arg VERSION=$(versionNumber)
              tags: |
                $(versionNumber)
                pdf-service-api
                latest
#          - task: PowerShell@2
#            displayName: Copy Test Results
#            inputs:
#              targetType: 'inline'
#              script: |
#                Write-Host "Looking for images with tag $(versionNumber)"
#                $imageId = (docker images ***/$(imageRepository):$(versionNumber) --quiet)
#
#                Write-Host "Setting the imageId to '${imageId}'."
#
#                Write-Host "Running Docker..."
#                $containerId = docker run -d ${imageId}
#                Write-Host "Setting the containerId to '${containerId}'."
#
#                # I found that is was sometimes necessary to have a delay before attempting the copy
#                # A more elegant retry solution would be better
#                Start-Sleep -Seconds 2
#
#                $testLocation = "${containerId}:/opt/app/junit.xml"
#                $coverageLocation = "${containerId}:/opt/app/coverage"
#                $exitCodeLocation = "${containerId}:/npm.exitcode"
#
#                Write-Host "Copying test results from '$testLocation'"
#                docker cp "${testLocation}" "$(Pipeline.Workspace)/junit.xml"
#
#                Write-Host "Copying coverage results from '$coverageLocation'"
#                docker cp "${coverageLocation}" "$(Pipeline.Workspace)/coverage"
#
#                Write-Host "Copying exit code from '$exitCodeLocation'."
#                docker cp "${exitCodeLocation}" "$(Pipeline.Workspace)/npm.exitcode"
#          - task: PublishTestResults@2
#            displayName: Publish Test Results
#            condition: succeededOrFailed()
#            inputs:
#              testResultsFormat: 'JUnit'
#              testResultsFiles: 'junit.xml'
#              searchFolder: $(Pipeline.Workspace)
#              mergeTestResults: true
#              failTaskOnFailedTests: true
#              testRunTitle: 'PDF Service Jest Tests'
#          - task: PublishCodeCoverageResults@1
#            displayName: Publish Code Coverage Results
#            inputs:
#              codeCoverageTool: Cobertura
#              summaryFileLocation: $(Pipeline.Workspace)/coverage/cobertura-coverage.xml
#          - task: PowerShell@2
#            displayName: Verify Tests Passed
#            inputs:
#              targetType: 'inline'
#              script: |
#                # Check exitcode file exists
#                  If("$(Test-Path $(Pipeline.Workspace)/npm.exitcode))" -eq "False") {
#                      Write-Host "Exit code for test run not found"
#                      exit 9
#                  }
#
#                  $exitCode = cat $(Pipeline.Workspace)/npm.exitcode
#
#                  If($exitCode -ne "0") {
#                      Write-Host "Tests failed"
#                      exit $exitCode
#                  }
          - task: Docker@2
            displayName: Push Image
            inputs:
              command: push
              repository: $(imageRepository)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(versionNumber)
                pdf-service-api
                latest
