{% extends "./main.njk" %}

{% from "govuk/components/back-link/macro.njk" import govukBackLink %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "components/appeal-details/macro.njk" import appealDetails %}
{% from "govuk/components/file-upload/macro.njk" import govukFileUpload -%}
{% from "moj/components/multi-file-upload/macro.njk" import mojMultiFileUpload -%}
{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}
{% from "components/accepted-document-formats/macro.njk" import acceptedDocumentFormats %}

{% block beforeContent %}
  {{ govukBackLink({
    text: 'Back',
    href: backLink,
    attributes: {
      'data-cy': 'back'
    }
  }) }}
{% endblock %}

{% block content %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      {% if errorSummary and errorSummary.length %}
        {{ govukErrorSummary({
          titleText: "There is a problem",
          errorList: errorSummary
        }) }}
      {% endif %}

      <form action="" method="POST" novalidate encType="multipart/form-data">
        <span class="govuk-caption-l"><span class="govuk-visually-hidden">Section. </span>{% block sectionName %}{% endblock %}</span>
        <h1 class="govuk-heading-l">{% block pageHeading %}{% endblock %}</h1>

        <p>{% block pageDescription %}{% endblock %}</p>

        {{ govukInsetText({
          text: "File size should be no more than " + fileSizeLimits.maxFileSize | formatBytes
        }) }}

        {% set uploadHtml %}
          {{ govukFileUpload({
            id: 'documents',
            name: 'documents',
            classes: 'moj-multi-file-upload__input',
            label: {
              text: 'Upload a file',
              classes: 'govuk-label--m'
            },
            attributes: { multiple: '' },
            errorMessage: errorMessage and {
              text: errorMessage
            }
          }) }}

          {{govukButton({
            text: 'Upload file',
            classes: 'govuk-button--secondary moj-multi-file-upload__button',
            name: 'upload',
            value: 'upload',
            attributes: {
              'data-cy': 'upload-file'
            }
          })}}
        {% endset %}

        {{ mojMultiFileUpload({
          uploadedFiles: {
            heading: { text: 'Files added' },
            items: uploadedFiles or []
          },
          uploadHtml: uploadHtml
        }) }}

        <input type="hidden" id="tempDocs" name="tempDocs" value="{{ documentList }}" />

        {{ acceptedDocumentFormats({}) }}

        {{ govukButton({
          text: 'Save and continue',
          name: 'submit',
          value: 'save',
          attributes: {
            'data-cy': 'save'
          }
        }) }}
      </form>
    </div>

    {{
      appealDetails({
        appeal: appeal
      })
    }}
  </div>
{% endblock %}

{% block pageScripts %}
<script src="/assets/moj/all.js"></script>
<script src="/assets/jquery/jquery.min.js"></script>
<script>
window.MOJFrontend.initAll();

if (typeof MOJFrontend.MultiFileUpload !== 'undefined') {
  var temporaryDocInput = document.getElementById('tempDocs');

  function onFileUpload(context, file, response) {
    var upload = {
      id: response.file.id,
      name: response.file.originalname,
      error: response.error ? response.error.message : undefined,
    };

    temporaryDocInput.value = temporaryDocInput.value + JSON.stringify(upload);
  };

  function onFileDelete(context, response) {
    var rawUploads = temporaryDocInput.value.match(/{.*?}/g) || [];
    var newUploads = [];
    for (i = 0; i < rawUploads.length ; i++) {
      if(rawUploads[i].indexOf(response.id) < 0) newUploads.push(JSON.parse(rawUploads[i]));
    }

    temporaryDocInput.value = JSON.stringify(newUploads).replace(/[[\]']+/g, '');
  };

  new MOJFrontend.MultiFileUpload({
    container: $('.moj-multi-file-upload'),
    uploadUrl: '/upload',
    deleteUrl: '/delete',
    uploadFileExitHook: onFileUpload,
    fileDeleteHook: onFileDelete,
  });
}
</script>
{% endblock %}
