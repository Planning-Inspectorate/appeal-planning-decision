<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="526" failures="8" errors="0" time="42.88">
  <testsuite name="validators/your-details" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:50" time="1.212" tests="10">
    <testcase classname="validators/your-details rules has a rule for the appellant&apos;s name" name="validators/your-details rules has a rule for the appellant&apos;s name" time="0.005">
    </testcase>
    <testcase classname="validators/your-details rules has a rule for the appellant&apos;s email" name="validators/your-details rules has a rule for the appellant&apos;s email" time="0.002">
    </testcase>
    <testcase classname="validators/your-details rules should have an array of rules" name="validators/your-details rules should have an array of rules" time="0.002">
    </testcase>
    <testcase classname="validators/your-details validator should return the expected validation outcome - undefined - empty" name="validators/your-details validator should return the expected validation outcome - undefined - empty" time="0.002">
    </testcase>
    <testcase classname="validators/your-details validator should return the expected validation outcome - invalid values 1 - fail" name="validators/your-details validator should return the expected validation outcome - invalid values 1 - fail" time="0.003">
    </testcase>
    <testcase classname="validators/your-details validator should return the expected validation outcome - invalid values 2 - fail - name too short and invalid email" name="validators/your-details validator should return the expected validation outcome - invalid values 2 - fail - name too short and invalid email" time="0.004">
    </testcase>
    <testcase classname="validators/your-details validator should return the expected validation outcome - invalid values 2 - fail - name too long and invalid email" name="validators/your-details validator should return the expected validation outcome - invalid values 2 - fail - name too long and invalid email" time="0.002">
    </testcase>
    <testcase classname="validators/your-details validator should return the expected validation outcome - invalid email - fail 1" name="validators/your-details validator should return the expected validation outcome - invalid email - fail 1" time="0.004">
    </testcase>
    <testcase classname="validators/your-details validator should return the expected validation outcome - invalid email - fail 2" name="validators/your-details validator should return the expected validation outcome - invalid email - fail 2" time="0">
    </testcase>
    <testcase classname="validators/your-details validator should return the expected validation outcome - valid values - pass" name="validators/your-details validator should return the expected validation outcome - valid values - pass" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/task-list" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:50" time="1.33" tests="3">
    <testcase classname="controllers/appellant-submission/task-list getTaskList All the tasks except check answers should be in not started" name="controllers/appellant-submission/task-list getTaskList All the tasks except check answers should be in not started" time="0.003">
    </testcase>
    <testcase classname="controllers/appellant-submission/task-list getTaskList Some tasks still in progress and check your answer cannot be started" name="controllers/appellant-submission/task-list getTaskList Some tasks still in progress and check your answer cannot be started" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/task-list getTaskList All the mandatory tasks should be completed and check your answer can be started" name="controllers/appellant-submission/task-list getTaskList All the mandatory tasks should be completed and check your answer can be started" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/site-location" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:50" time="1.336" tests="24">
    <testcase classname="validators/appellant-submission/site-location rules should have the expected number of rules" name="validators/appellant-submission/site-location rules should have the expected number of rules" time="0.005">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location rules ruleAddressLine1 is configured with the expected rules" name="validators/appellant-submission/site-location rules ruleAddressLine1 is configured with the expected rules" time="0.02">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location rules ruleAddressLine2 is configured with the expected rules" name="validators/appellant-submission/site-location rules ruleAddressLine2 is configured with the expected rules" time="0.029">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location rules ruleAddressTownCity is configured with the expected rules" name="validators/appellant-submission/site-location rules ruleAddressTownCity is configured with the expected rules" time="0.008">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location rules ruleAddressCounty is configured with the expected rules" name="validators/appellant-submission/site-location rules ruleAddressCounty is configured with the expected rules" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location rules ruleAddressPostCode is configured with the expected rules" name="validators/appellant-submission/site-location rules ruleAddressPostCode is configured with the expected rules" time="0.003">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - full address provided" name="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - full address provided" time="0.006">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - minimum address provided" name="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - minimum address provided" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - address line 2 is missing" name="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - address line 2 is missing" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - town / city is missing" name="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - town / city is missing" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - county is missing" name="validators/appellant-submission/site-location validator should return the expected validation outcome - valid - county is missing" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-one is missing" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-one is missing" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-postcode is missing" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-postcode is missing" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-one (required) and site-county (optional) are missing" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-one (required) and site-county (optional) are missing" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-one and site-postcode are missing" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-one and site-postcode are missing" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-county (optional) and site-postcode (required) are missing" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-county (optional) and site-postcode (required) are missing" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - all fields are missing" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - all fields are missing" time="0.003">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-one is too long" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-one is too long" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-two is too long" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-address-line-two is too long" time="0.009">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-town-city is too long" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-town-city is too long" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-county is too long" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-county is too long" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-postcode is too long" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-postcode is too long" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-postcode should begin with a letter" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-postcode should begin with a letter" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-postcode can&apos;t be only letters" name="validators/appellant-submission/site-location validator should return the expected validation outcome - invalid - site-postcode can&apos;t be only letters" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/supporting-documents" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:50" time="1.365" tests="10">
    <testcase classname="controllers/appellant-submission/supporting-documents getSupportingDocuments should call the correct template" name="controllers/appellant-submission/supporting-documents getSupportingDocuments should call the correct template" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/supporting-documents postSupportingDocuments should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/supporting-documents postSupportingDocuments should re-render the template with errors if submission validation fails" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/supporting-documents postSupportingDocuments should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/supporting-documents postSupportingDocuments should re-render the template with errors if submission validation fails" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/supporting-documents postSupportingDocuments should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/supporting-documents postSupportingDocuments should re-render the template with errors if submission validation fails" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/supporting-documents postSupportingDocuments should log an error if the api call fails, and remain on the same page" name="controllers/appellant-submission/supporting-documents postSupportingDocuments should log an error if the api call fails, and remain on the same page" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/supporting-documents postSupportingDocuments should not require req.files to be valid" name="controllers/appellant-submission/supporting-documents postSupportingDocuments should not require req.files to be valid" time="0.008">
    </testcase>
    <testcase classname="controllers/appellant-submission/supporting-documents postSupportingDocuments conditional redirect should redirect - upload-and-remain-on-page - if valid - single file" name="controllers/appellant-submission/supporting-documents postSupportingDocuments conditional redirect should redirect - upload-and-remain-on-page - if valid - single file" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/supporting-documents postSupportingDocuments conditional redirect should redirect - task list - if valid - single file" name="controllers/appellant-submission/supporting-documents postSupportingDocuments conditional redirect should redirect - task list - if valid - single file" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/supporting-documents postSupportingDocuments conditional redirect should redirect - upload-and-remain-on-page if valid - multiple file" name="controllers/appellant-submission/supporting-documents postSupportingDocuments conditional redirect should redirect - upload-and-remain-on-page if valid - multiple file" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/supporting-documents postSupportingDocuments conditional redirect should redirect - task list if valid - multiple file" name="controllers/appellant-submission/supporting-documents postSupportingDocuments conditional redirect should redirect - task list if valid - multiple file" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/site-ownership" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:50" time="1.481" tests="11">
    <testcase classname="controllers/appellant-submission/site-ownership getSiteOwnership should call the correct template" name="controllers/appellant-submission/site-ownership getSiteOwnership should call the correct template" time="0.008">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership postSiteOwnership should re-render the template with errors if there is any validation error" name="controllers/appellant-submission/site-ownership postSiteOwnership should re-render the template with errors if there is any validation error" time="0.007">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership postSiteOwnership should re-render the template with errors if there is any api call error" name="controllers/appellant-submission/site-ownership postSiteOwnership should re-render the template with errors if there is any api call error" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership postSiteOwnership should redirect to the next valid url if ownsWholeSite" name="controllers/appellant-submission/site-ownership postSiteOwnership should redirect to the next valid url if ownsWholeSite" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership postSiteOwnership should redirect to /appellant-submission/site-ownership-certb if does not ownsWholeSite" name="controllers/appellant-submission/site-ownership postSiteOwnership should redirect to /appellant-submission/site-ownership-certb if does not ownsWholeSite" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership should null the contents of haveOtherOwnersBeenTold if site-ownership is set to yes" name="controllers/appellant-submission/site-ownership should null the contents of haveOtherOwnersBeenTold if site-ownership is set to yes" time="0.003">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership should null the contents of haveOtherOwnersBeenTold if site-ownership is set to yes" name="controllers/appellant-submission/site-ownership should null the contents of haveOtherOwnersBeenTold if site-ownership is set to yes" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership should null the contents of haveOtherOwnersBeenTold if site-ownership is set to yes" name="controllers/appellant-submission/site-ownership should null the contents of haveOtherOwnersBeenTold if site-ownership is set to yes" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership should retain the contents of haveOtherOwnersBeenTold if site-ownership is set to no" name="controllers/appellant-submission/site-ownership should retain the contents of haveOtherOwnersBeenTold if site-ownership is set to no" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership should retain the contents of haveOtherOwnersBeenTold if site-ownership is set to no" name="controllers/appellant-submission/site-ownership should retain the contents of haveOtherOwnersBeenTold if site-ownership is set to no" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership should retain the contents of haveOtherOwnersBeenTold if site-ownership is set to no" name="controllers/appellant-submission/site-ownership should retain the contents of haveOtherOwnersBeenTold if site-ownership is set to no" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="validators/custom/date-input" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:50" time="1.601" tests="23">
    <testcase classname="validators/custom/date-input rules has a rule to check for empty day input" name="validators/custom/date-input rules has a rule to check for empty day input" time="0.014">
    </testcase>
    <testcase classname="validators/custom/date-input rules has a rule to check for empty month input" name="validators/custom/date-input rules has a rule to check for empty month input" time="0">
    </testcase>
    <testcase classname="validators/custom/date-input rules has a rule for check for empty year input" name="validators/custom/date-input rules has a rule for check for empty year input" time="0.001">
    </testcase>
    <testcase classname="validators/custom/date-input rules has a rule to check for valid day input" name="validators/custom/date-input rules has a rule to check for valid day input" time="0.001">
    </testcase>
    <testcase classname="validators/custom/date-input rules has a rule to check for valid month input" name="validators/custom/date-input rules has a rule to check for valid month input" time="0.001">
    </testcase>
    <testcase classname="validators/custom/date-input rules has a rule for valid year input" name="validators/custom/date-input rules has a rule for valid year input" time="0">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (all empty) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (all empty) - fail" time="0.002">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (empty day, month) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (empty day, month) - fail" time="0.001">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (empty day, year) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (empty day, year) - fail" time="0.001">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (empty day) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (empty day) - fail" time="0.001">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (empty month, year) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (empty month, year) - fail" time="0">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (empty month) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (empty month) - fail" time="0.009">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (empty year) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (empty year) - fail" time="0.002">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (day not integer) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (day not integer) - fail" time="0.002">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (day &gt; 31) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (day &gt; 31) - fail" time="0.003">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (31 day in 30 day month) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (31 day in 30 day month) - fail" time="0.001">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (29 days in February when not leap year) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (29 days in February when not leap year) - fail" time="0.016">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (month not numeric) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (month not numeric) - fail" time="0.002">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (impossible number months) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (impossible number months) - fail" time="0.002">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (year not numeric) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (year not numeric) - fail" time="0.002">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - invalid (year outside range) - fail" name="validators/custom/date-input validator should return the expected validation outcome - invalid (year outside range) - fail" time="0.003">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - valid date (29 days in leap year) - pass" name="validators/custom/date-input validator should return the expected validation outcome - valid date (29 days in leap year) - pass" time="0.001">
    </testcase>
    <testcase classname="validators/custom/date-input validator should return the expected validation outcome - valid date - pass" name="validators/custom/date-input validator should return the expected validation outcome - valid date - pass" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="middleware/navigation-history" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.27" tests="11">
    <testcase classname="middleware/navigation-history no session, return early" name="middleware/navigation-history no session, return early" time="0.001">
    </testcase>
    <testcase classname="middleware/navigation-history req.session.navigationHistory is not an array" name="middleware/navigation-history req.session.navigationHistory is not an array" time="0">
    </testcase>
    <testcase classname="middleware/navigation-history req.session.navigationHistory fall back :: initial visit, requested path matches default fallbackPath" name="middleware/navigation-history req.session.navigationHistory fall back :: initial visit, requested path matches default fallbackPath" time="0">
    </testcase>
    <testcase classname="middleware/navigation-history req.session.navigationHistory fall back :: initial visit, requested path does not match fallbackPath" name="middleware/navigation-history req.session.navigationHistory fall back :: initial visit, requested path does not match fallbackPath" time="0">
    </testcase>
    <testcase classname="middleware/navigation-history req.session.navigationHistory is a valid array :: initial visit, requested path matches default fallbackPath" name="middleware/navigation-history req.session.navigationHistory is a valid array :: initial visit, requested path matches default fallbackPath" time="0.001">
    </testcase>
    <testcase classname="middleware/navigation-history req.session.navigationHistory is a valid array :: initial visit, requested path does not match fallbackPath" name="middleware/navigation-history req.session.navigationHistory is a valid array :: initial visit, requested path does not match fallbackPath" time="0">
    </testcase>
    <testcase classname="middleware/navigation-history req.session.navigationHistory is a valid array :: subsequent visit, one item in the navigationHistory stack ::: requested path matches last page in the navigationHistory stack" name="middleware/navigation-history req.session.navigationHistory is a valid array :: subsequent visit, one item in the navigationHistory stack ::: requested path matches last page in the navigationHistory stack" time="0">
    </testcase>
    <testcase classname="middleware/navigation-history req.session.navigationHistory is a valid array :: subsequent visit, two items in the navigationHistory stack ::: requested path matches last page in the navigationHistory stack" name="middleware/navigation-history req.session.navigationHistory is a valid array :: subsequent visit, two items in the navigationHistory stack ::: requested path matches last page in the navigationHistory stack" time="0">
    </testcase>
    <testcase classname="middleware/navigation-history req.session.navigationHistory is a valid array :: subsequent visit, two items in the navigationHistory stack ::: requested path matches req.session.navigationHistory[1] in the navigationHistory stack" name="middleware/navigation-history req.session.navigationHistory is a valid array :: subsequent visit, two items in the navigationHistory stack ::: requested path matches req.session.navigationHistory[1] in the navigationHistory stack" time="0.001">
    </testcase>
    <testcase classname="middleware/navigation-history custom config :: override fallbackPath" name="middleware/navigation-history custom config :: override fallbackPath" time="0.005">
    </testcase>
    <testcase classname="middleware/navigation-history custom config :: override stackSize" name="middleware/navigation-history custom config :: override stackSize" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="controllers/eligibility/decision-date" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:50" time="1.7" tests="11">
    <testcase classname="controllers/eligibility/decision-date getNoDecision should call the correct template" name="controllers/eligibility/decision-date getNoDecision should call the correct template" time="0.007">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date getDecisionDate should call the correct template decision date unevaluated" name="controllers/eligibility/decision-date getDecisionDate should call the correct template decision date unevaluated" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date getDecisionDate should call the correct template with existing decision date" name="controllers/eligibility/decision-date getDecisionDate should call the correct template with existing decision date" time="0.005">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date postDecisionDate should display the decision date passed template if the decision date is passed" name="controllers/eligibility/decision-date postDecisionDate should display the decision date passed template if the decision date is passed" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date postDecisionDate should display the decision date template with errors if any field is invalid" name="controllers/eligibility/decision-date postDecisionDate should display the decision date template with errors if any field is invalid" time="0.003">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date postDecisionDate should redirect to planning department as deadline date is not passed" name="controllers/eligibility/decision-date postDecisionDate should redirect to planning department as deadline date is not passed" time="0.003">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date postDecisionDate should redirect to decision drop out as deadline date is passed" name="controllers/eligibility/decision-date postDecisionDate should redirect to decision drop out as deadline date is passed" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date should re-render the template with errors if there is any validation error" name="controllers/eligibility/decision-date should re-render the template with errors if there is any validation error" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date should re-render the template with errors if there is any api call error" name="controllers/eligibility/decision-date should re-render the template with errors if there is any api call error" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date getDecisionDatePassed should call the correct template with deadline not valued" name="controllers/eligibility/decision-date getDecisionDatePassed should call the correct template with deadline not valued" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/decision-date getDecisionDatePassed should call the correct template with deadline date being 12 weeks after decision date" name="controllers/eligibility/decision-date getDecisionDatePassed should call the correct template with deadline date being 12 weeks after decision date" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/appeal-statement" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.439" tests="6">
    <testcase classname="controllers/appellant-submission/appeal-statement getAppealStatement should call the correct template" name="controllers/appellant-submission/appeal-statement getAppealStatement should call the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/appeal-statement postAppealStatement should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/appeal-statement postAppealStatement should re-render the template with errors if submission validation fails" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/appeal-statement postAppealStatement should redirect back to `/appellant-submission/appeal-statement` if validation passes but `i-confirm` not given" name="controllers/appellant-submission/appeal-statement postAppealStatement should redirect back to `/appellant-submission/appeal-statement` if validation passes but `i-confirm` not given" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/appeal-statement postAppealStatement should log an error if the api call fails, and remain on the same page" name="controllers/appellant-submission/appeal-statement postAppealStatement should log an error if the api call fails, and remain on the same page" time="0.009">
    </testcase>
    <testcase classname="controllers/appellant-submission/appeal-statement postAppealStatement should not require req.files to be valid" name="controllers/appellant-submission/appeal-statement postAppealStatement should not require req.files to be valid" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/appeal-statement postAppealStatement should redirect to `/appellant-submission/supporting-documents` if valid" name="controllers/appellant-submission/appeal-statement postAppealStatement should redirect to `/appellant-submission/supporting-documents` if valid" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/appeal-statement" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.413" tests="12">
    <testcase classname="validators/appellant-submission/appeal-statement rules has a rule for `does-not-include-sensitive-information`" name="validators/appellant-submission/appeal-statement rules has a rule for `does-not-include-sensitive-information`" time="0.004">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement rules has a rule for `appeal-upload`" name="validators/appellant-submission/appeal-statement rules has a rule for `appeal-upload`" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement rules should have the expected number of configured rules" name="validators/appellant-submission/appeal-statement rules should have the expected number of configured rules" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - undefined - empty" name="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - undefined - empty" time="0.003">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - invalid value for `does-not-include-sensitive-information` - fail" name="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - invalid value for `does-not-include-sensitive-information` - fail" time="0.004">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information` - &quot;i-confirm&quot; - pass" name="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information` - &quot;i-confirm&quot; - pass" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, files key is empty - pass" name="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, files key is empty - pass" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, files path is not matched - pass" name="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, files path is not matched - pass" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, files path is matched but mime type is wrong - fail" name="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, files path is matched but mime type is wrong - fail" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, files path is matched but file size is too big - fail" name="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, files path is matched but file size is too big - fail" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, no file, never submitted - fail" name="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, no file, never submitted - fail" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, valid file - pass" name="validators/appellant-submission/appeal-statement validator should return the expected validation outcome - valid value for `does-not-include-sensitive-information`, valid file - pass" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="controllers/cookies" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.381" tests="8">
    <testcase classname="controllers/cookies getCookies should not throw if cannot parse req.cookies value" name="controllers/cookies getCookies should not throw if cannot parse req.cookies value" time="0.001">
    </testcase>
    <testcase classname="controllers/cookies getCookies should call the correct template" name="controllers/cookies getCookies should call the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/cookies postCookies should redirect on the happy path - no data submitted" name="controllers/cookies postCookies should redirect on the happy path - no data submitted" time="0">
    </testcase>
    <testcase classname="controllers/cookies postCookies calls the correct template on error" name="controllers/cookies postCookies calls the correct template on error" time="0">
    </testcase>
    <testcase classname="controllers/cookies postCookies should redirect on the happy path with data submitted - Not in production, disable usage cookies" name="controllers/cookies postCookies should redirect on the happy path with data submitted - Not in production, disable usage cookies" time="0.001">
    </testcase>
    <testcase classname="controllers/cookies postCookies should redirect on the happy path with data submitted - Not in production, enable usage cookies" name="controllers/cookies postCookies should redirect on the happy path with data submitted - Not in production, enable usage cookies" time="0.001">
    </testcase>
    <testcase classname="controllers/cookies postCookies should redirect on the happy path with data submitted - In production, disable usage cookies" name="controllers/cookies postCookies should redirect on the happy path with data submitted - In production, disable usage cookies" time="0.001">
    </testcase>
    <testcase classname="controllers/cookies postCookies should redirect on the happy path with data submitted - In production,  enable usage cookies" name="controllers/cookies postCookies should redirect on the happy path with data submitted - In production,  enable usage cookies" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="controllers/eligibility/planning-department" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.556" tests="8">
    <testcase classname="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartment method calls the correct template" name="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartment method calls the correct template" time="0.002">
    </testcase>
    <testcase classname="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartment method calls the correct template" name="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartment method calls the correct template" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartment method with existing LPD calls the correct template" name="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartment method with existing LPD calls the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartmentOut method calls the correct template" name="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartmentOut method calls the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/planning-department Planning Department Controller Tests Test the postPlanningDepartment method call with handled department" name="controllers/eligibility/planning-department Planning Department Controller Tests Test the postPlanningDepartment method call with handled department" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartment method call with ineligible department" name="controllers/eligibility/planning-department Planning Department Controller Tests Test the getPlanningDepartment method call with ineligible department" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/planning-department Planning Department Controller Tests Test the postPlanningDepartment method call on error" name="controllers/eligibility/planning-department Planning Department Controller Tests Test the postPlanningDepartment method call on error" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/planning-department Planning Department Controller Tests should log an error if the api call fails, and remain on the same page" name="controllers/eligibility/planning-department Planning Department Controller Tests should log an error if the api call fails, and remain on the same page" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="lib/remove-unwanted-cookies" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.268" tests="9">
    <testcase classname="lib/remove-unwanted-cookies defaultKeepMeCookies should have the expected cookie names" name="lib/remove-unwanted-cookies defaultKeepMeCookies should have the expected cookie names" time="0.001">
    </testcase>
    <testcase classname="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - no existing cookies" name="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - no existing cookies" time="0">
    </testcase>
    <testcase classname="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - retains session cookie" name="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - retains session cookie" time="0.001">
    </testcase>
    <testcase classname="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - can force session cookie removal if explicitly excluded in keepTheseCookies" name="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - can force session cookie removal if explicitly excluded in keepTheseCookies" time="0.001">
    </testcase>
    <testcase classname="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - retains cookie_policy" name="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - retains cookie_policy" time="0">
    </testcase>
    <testcase classname="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - can force cookie_policy removal if explicitly excluded in keepTheseCookies" name="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - can force cookie_policy removal if explicitly excluded in keepTheseCookies" time="0.001">
    </testcase>
    <testcase classname="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - removes and retains expected with defaults" name="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - removes and retains expected with defaults" time="0.001">
    </testcase>
    <testcase classname="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - removes and retains expected with custom keepTheseCookies" name="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - removes and retains expected with custom keepTheseCookies" time="0">
    </testcase>
    <testcase classname="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - removes and retains expected with real world looking setup" name="lib/remove-unwanted-cookies removeUnwantedCookies should retain the expected cookies - removes and retains expected with real world looking setup" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/your-details" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.291" tests="5">
    <testcase classname="controllers/appellant-submission/your-details getYourDetails should call the correct template" name="controllers/appellant-submission/your-details getYourDetails should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/your-details postYourDetails should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/your-details postYourDetails should re-render the template with errors if submission validation fails" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/your-details postYourDetails should log an error if the api call fails, and remain on the same page" name="controllers/appellant-submission/your-details postYourDetails should log an error if the api call fails, and remain on the same page" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/your-details postYourDetails should redirect to task list if valid and original appellant" name="controllers/appellant-submission/your-details postYourDetails should redirect to task list if valid and original appellant" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/your-details postYourDetails should redirect to the applicant name page if valid and not the original appellant" name="controllers/appellant-submission/your-details postYourDetails should redirect to the applicant name page if valid and not the original appellant" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/site-access" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.362" tests="11">
    <testcase classname="validators/appellant-submission/site-access rules is configured with the expected rules" name="validators/appellant-submission/site-access rules is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access rules ruleSiteAccess is configured with the expected rules" name="validators/appellant-submission/site-access rules ruleSiteAccess is configured with the expected rules" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access rules ruleSiteAccessMoreDetail is configured with the expected rules" name="validators/appellant-submission/site-access rules ruleSiteAccessMoreDetail is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access validator should return the expected validation outcome - No selection made as to the visibility of the site" name="validators/appellant-submission/site-access validator should return the expected validation outcome - No selection made as to the visibility of the site" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access validator should return the expected validation outcome - Site can be viewed from public highway" name="validators/appellant-submission/site-access validator should return the expected validation outcome - Site can be viewed from public highway" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, no information provided as to how - `site-access-more-detail` field missing - invalid" name="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, no information provided as to how - `site-access-more-detail` field missing - invalid" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, information provided as to how - valid" name="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, information provided as to how - valid" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, no information provided as to how - `site-access-more-detail` is empty - invalid" name="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, no information provided as to how - `site-access-more-detail` is empty - invalid" time="0.005">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, information provided is max length - valid" name="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, information provided is max length - valid" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, information provided exceeds max length - invalid" name="validators/appellant-submission/site-access validator should return the expected validation outcome - Site cannot be viewed from public highway, information provided exceeds max length - invalid" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access validSiteAccessOptions should define the expected valid site access options" name="validators/appellant-submission/site-access validSiteAccessOptions should define the expected valid site access options" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/site-access-safety" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.278" tests="10">
    <testcase classname="validators/appellant-submission/site-access-safety rules is configured with the expected rules" name="validators/appellant-submission/site-access-safety rules is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access-safety rules ruleSiteAccessSafety is configured with the expected rules" name="validators/appellant-submission/site-access-safety rules ruleSiteAccessSafety is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access-safety rules ruleSiteAccessSafetyConcerns is configured with the expected rules" name="validators/appellant-submission/site-access-safety rules ruleSiteAccessSafetyConcerns is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - No selection made as to the health and safety issues on the appeal site" name="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - No selection made as to the health and safety issues on the appeal site" time="0.003">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are no health and safety issues on the appeal site" name="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are no health and safety issues on the appeal site" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are health and safety issues on the appeal site, but `site-access-safety-concerns` is undefined" name="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are health and safety issues on the appeal site, but `site-access-safety-concerns` is undefined" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are health and safety issues on the appeal site, but `site-access-safety-concerns` is empty" name="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are health and safety issues on the appeal site, but `site-access-safety-concerns` is empty" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are health and safety issues on the appeal site, but the concerns message is too long" name="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are health and safety issues on the appeal site, but the concerns message is too long" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are health and safety issues on the appeal site and `site-access-safety-concerns` is provided" name="validators/appellant-submission/site-access-safety validator should return the expected validation outcome - There are health and safety issues on the appeal site and `site-access-safety-concerns` is provided" time="0.004">
    </testcase>
    <testcase classname="validators/appellant-submission/site-access-safety validSiteAccessSafetyOptions should define the expected valid site access safety options" name="validators/appellant-submission/site-access-safety validSiteAccessSafetyOptions should define the expected valid site access safety options" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/site-access-safety" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.38" tests="6">
    <testcase classname="controllers/appellant-submission/site-access-safety getSiteAccessSafety should call the correct template" name="controllers/appellant-submission/site-access-safety getSiteAccessSafety should call the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-access-safety postSiteAccessSafety should re-render the template with errors if there is any validation error" name="controllers/appellant-submission/site-access-safety postSiteAccessSafety should re-render the template with errors if there is any validation error" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-access-safety postSiteAccessSafety should re-render the template with errors if there is any api call error" name="controllers/appellant-submission/site-access-safety postSiteAccessSafety should re-render the template with errors if there is any api call error" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-access-safety postSiteAccessSafety issues with concern - should redirect to the task list" name="controllers/appellant-submission/site-access-safety postSiteAccessSafety issues with concern - should redirect to the task list" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-access-safety postSiteAccessSafety no issues with concerns - should redirect to the task list - basic expected payload" name="controllers/appellant-submission/site-access-safety postSiteAccessSafety no issues with concerns - should redirect to the task list - basic expected payload" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-access-safety postSiteAccessSafety no issues with concerns - should redirect to the task list - acceptable submission, though safety concerns will be ignored when creating or updating the appeal" name="controllers/appellant-submission/site-access-safety postSiteAccessSafety no issues with concerns - should redirect to the task list - acceptable submission, though safety concerns will be ignored when creating or updating the appeal" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/upload-decision" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.295" tests="5">
    <testcase classname="controllers/appellant-submission/upload-decision getUploadDecision should call the correct template" name="controllers/appellant-submission/upload-decision getUploadDecision should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/upload-decision postUploadDecision should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/upload-decision postUploadDecision should re-render the template with errors if submission validation fails" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/upload-decision postUploadDecision should log an error if the api call fails, and remain on the same page" name="controllers/appellant-submission/upload-decision postUploadDecision should log an error if the api call fails, and remain on the same page" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/upload-decision postUploadDecision should not require req.files to be valid" name="controllers/appellant-submission/upload-decision postUploadDecision should not require req.files to be valid" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/upload-decision postUploadDecision should redirect to `/appellant-submission/task-list` if valid" name="controllers/appellant-submission/upload-decision postUploadDecision should redirect to `/appellant-submission/task-list` if valid" time="0">
    </testcase>
  </testsuite>
  <testsuite name="services/department.service" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.261" tests="7">
    <testcase classname="services/department.service getRefreshedDepartmentData should  give empty result " name="services/department.service getRefreshedDepartmentData should  give empty result " time="0">
    </testcase>
    <testcase classname="services/department.service getRefreshedDepartmentData should transform data" name="services/department.service getRefreshedDepartmentData should transform data" time="0.001">
    </testcase>
    <testcase classname="services/department.service getDepartmentData should  give empty result " name="services/department.service getDepartmentData should  give empty result " time="0">
    </testcase>
    <testcase classname="services/department.service getDepartmentData should transform data" name="services/department.service getDepartmentData should transform data" time="0.001">
    </testcase>
    <testcase classname="services/department.service getDepartmentFromId should return department by Id" name="services/department.service getDepartmentFromId should return department by Id" time="0">
    </testcase>
    <testcase classname="services/department.service getDepartmentFromName should return department by Name" name="services/department.service getDepartmentFromName should return department by Name" time="0.001">
    </testcase>
    <testcase classname="services/department.service resetDepartments should return department by Name" name="services/department.service resetDepartments should return department by Name" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/upload-application" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.242" tests="5">
    <testcase classname="controllers/appellant-submission/upload-application getUploadApplication should call the correct template" name="controllers/appellant-submission/upload-application getUploadApplication should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/upload-application postUploadApplication should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/upload-application postUploadApplication should re-render the template with errors if submission validation fails" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/upload-application postUploadApplication should log an error if the api call fails, and remain on the same page" name="controllers/appellant-submission/upload-application postUploadApplication should log an error if the api call fails, and remain on the same page" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/upload-application postUploadApplication should not require req.files to be valid" name="controllers/appellant-submission/upload-application postUploadApplication should not require req.files to be valid" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/upload-application postUploadApplication should redirect to `/appellant-submission/supporting-documents` if valid" name="controllers/appellant-submission/upload-application postUploadApplication should redirect to `/appellant-submission/supporting-documents` if valid" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/who-are-you" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="0.237" tests="5">
    <testcase classname="controllers/appellant-submission/who-are-you getWhoAreYou should call the correct template" name="controllers/appellant-submission/who-are-you getWhoAreYou should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/who-are-you postWhoAreYou should redirect with original-appellant set to true" name="controllers/appellant-submission/who-are-you postWhoAreYou should redirect with original-appellant set to true" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/who-are-you postWhoAreYou should redirect with original-appellant set to false" name="controllers/appellant-submission/who-are-you postWhoAreYou should redirect with original-appellant set to false" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/who-are-you postWhoAreYou should re-render the template with errors if there is any validator error" name="controllers/appellant-submission/who-are-you postWhoAreYou should re-render the template with errors if there is any validator error" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/who-are-you postWhoAreYou should re-render the template with errors if there is any api call error" name="controllers/appellant-submission/who-are-you postWhoAreYou should re-render the template with errors if there is any api call error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/site-access" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.334" tests="5">
    <testcase classname="controllers/appellant-submission/site-access getSiteAccess should call the correct template" name="controllers/appellant-submission/site-access getSiteAccess should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-access postSiteAccess should re-render the template with errors if there is any validation error" name="controllers/appellant-submission/site-access postSiteAccess should re-render the template with errors if there is any validation error" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-access postSiteAccess should re-render the template with errors if there is any api call error" name="controllers/appellant-submission/site-access postSiteAccess should re-render the template with errors if there is any api call error" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-access postSiteAccess should redirect to `/appellant-submission/site-access-safety` if `site-access` is `yes`" name="controllers/appellant-submission/site-access postSiteAccess should redirect to `/appellant-submission/site-access-safety` if `site-access` is `yes`" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-access postSiteAccess should redirect to `/appellant-submission/site-access-safety` if `site-access` is `no`" name="controllers/appellant-submission/site-access postSiteAccess should redirect to `/appellant-submission/site-access-safety` if `site-access` is `no`" time="0">
    </testcase>
  </testsuite>
  <testsuite name="services/task.service" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="0.177" tests="9">
    <testcase classname="services/task.service getNextTask should return next on going task" name="services/task.service getNextTask should return next on going task" time="0">
    </testcase>
    <testcase classname="services/task.service getNextTask should return task list as all the remaining section tasks cannot be started yet" name="services/task.service getNextTask should return task list as all the remaining section tasks cannot be started yet" time="0.001">
    </testcase>
    <testcase classname="services/task.service SECTIONS should return early from statusCheckYourAnswer if the appeal is already submitted " name="services/task.service SECTIONS should return early from statusCheckYourAnswer if the appeal is already submitted " time="0">
    </testcase>
    <testcase classname="services/task.service getNextTask should return the expected next on going task" name="services/task.service getNextTask should return the expected next on going task" time="0">
    </testcase>
    <testcase classname="services/task.service getNextTask should return the expected next on going task" name="services/task.service getNextTask should return the expected next on going task" time="0">
    </testcase>
    <testcase classname="services/task.service getNextTask should return the expected next on going task" name="services/task.service getNextTask should return the expected next on going task" time="0">
    </testcase>
    <testcase classname="services/task.service getNextTask should return the expected next on going task" name="services/task.service getNextTask should return the expected next on going task" time="0">
    </testcase>
    <testcase classname="services/task.service getNextTask should fall through to default even when allowing `sections` to be an optional parameter" name="services/task.service getNextTask should fall through to default even when allowing `sections` to be an optional parameter" time="0.001">
    </testcase>
    <testcase classname="services/task.service getNextTask should allow `sections` to be an optional parameter" name="services/task.service getNextTask should allow `sections` to be an optional parameter" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/upload-application" errors="0" failures="5" skipped="0" timestamp="2021-09-19T20:20:53" time="0.296" tests="11">
    <testcase classname="validators/appellant-submission/upload-application rules has a rule for `application-upload`" name="validators/appellant-submission/upload-application rules has a rule for `application-upload`" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application rules should have the expected number of configured rules" name="validators/appellant-submission/upload-application rules should have the expected number of configured rules" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application validator should return the expected validation outcome - already submitted / undefined / empty - pass " name="validators/appellant-submission/upload-application validator should return the expected validation outcome - already submitted / undefined / empty - pass " time="0.004">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application validator should return the expected validation outcome - already submitted / files key is empty - pass" name="validators/appellant-submission/upload-application validator should return the expected validation outcome - already submitted / files key is empty - pass" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application validator should return the expected validation outcome - already submitted / files path is not matched - pass" name="validators/appellant-submission/upload-application validator should return the expected validation outcome - already submitted / files path is not matched - pass" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application validator should return the expected validation outcome - never submitted / undefined / empty - fail " name="validators/appellant-submission/upload-application validator should return the expected validation outcome - never submitted / undefined / empty - fail " time="0.001">
      <failure>Error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 0
Received array:  []
    at expected (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:78:33)
    at Object.&lt;anonymous&gt; (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:167:9)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)</failure>
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application validator should return the expected validation outcome - never submitted / files key is empty - fail" name="validators/appellant-submission/upload-application validator should return the expected validation outcome - never submitted / files key is empty - fail" time="0.001">
      <failure>Error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 0
Received array:  []
    at expected (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:89:33)
    at Object.&lt;anonymous&gt; (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:167:9)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)</failure>
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application validator should return the expected validation outcome - never submitted /files path is not matched - fail" name="validators/appellant-submission/upload-application validator should return the expected validation outcome - never submitted /files path is not matched - fail" time="0.001">
      <failure>Error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 0
Received array:  []
    at expected (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:103:33)
    at Object.&lt;anonymous&gt; (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:167:9)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)</failure>
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application validator should return the expected validation outcome - files path is matched but mime type is wrong - fail" name="validators/appellant-submission/upload-application validator should return the expected validation outcome - files path is matched but mime type is wrong - fail" time="0">
      <failure>Error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 0
Received array:  []
    at expected (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:121:33)
    at Object.&lt;anonymous&gt; (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:167:9)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)</failure>
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application validator should return the expected validation outcome - files path is matched but file size is too big - fail" name="validators/appellant-submission/upload-application validator should return the expected validation outcome - files path is matched but file size is too big - fail" time="0.001">
      <failure>Error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 0
Received array:  []
    at expected (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:139:33)
    at Object.&lt;anonymous&gt; (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application.test.js:167:9)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)</failure>
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application validator should return the expected validation outcome - valid file - pass" name="validators/appellant-submission/upload-application validator should return the expected validation outcome - valid file - pass" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/eligibility/householder-planning-permission" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="0.281" tests="6">
    <testcase classname="controllers/eligibility/householder-planning-permission getServiceOnlyForHouseholderPlanningPermission calls the correct template" name="controllers/eligibility/householder-planning-permission getServiceOnlyForHouseholderPlanningPermission calls the correct template" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/householder-planning-permission getHouseholderPlanningPermission should call the correct template" name="controllers/eligibility/householder-planning-permission getHouseholderPlanningPermission should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/householder-planning-permission postHouseholderPlanningPermission should re-render the template with errors if there is any validation error" name="controllers/eligibility/householder-planning-permission postHouseholderPlanningPermission should re-render the template with errors if there is any validation error" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/householder-planning-permission postHouseholderPlanningPermission should re-render the template with errors if there is any api call error" name="controllers/eligibility/householder-planning-permission postHouseholderPlanningPermission should re-render the template with errors if there is any api call error" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/householder-planning-permission postHouseholderPlanningPermission &apos;should redirect to &apos;/eligibility/granted-or-refused-permission&apos; if &apos;householder-planning-permission&apos; is &apos;yes&apos;" name="controllers/eligibility/householder-planning-permission postHouseholderPlanningPermission &apos;should redirect to &apos;/eligibility/granted-or-refused-permission&apos; if &apos;householder-planning-permission&apos; is &apos;yes&apos;" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/householder-planning-permission postHouseholderPlanningPermission &apos;should redirect to &apos;/eligibility/householder-planning-permission-out&apos; if &apos;householder-planning-permission&apos; is &apos;no&apos;" name="controllers/eligibility/householder-planning-permission postHouseholderPlanningPermission &apos;should redirect to &apos;/eligibility/householder-planning-permission-out&apos; if &apos;householder-planning-permission&apos; is &apos;no&apos;" time="0">
    </testcase>
  </testsuite>
  <testsuite name="lib/client-side/cookie/cookie-consent" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:52" time="0.512" tests="10">
    <testcase classname="lib/client-side/cookie/cookie-consent setCookies" name="lib/client-side/cookie/cookie-consent setCookies" time="0.006">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent hideConsentBanner" name="lib/client-side/cookie/cookie-consent hideConsentBanner" time="0.003">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent getConsentButtons" name="lib/client-side/cookie/cookie-consent getConsentButtons" time="0.002">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent displayConsentButtons" name="lib/client-side/cookie/cookie-consent displayConsentButtons" time="0.002">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent addAcceptCookieConsentListener" name="lib/client-side/cookie/cookie-consent addAcceptCookieConsentListener" time="0.005">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent addRejectCookieConsentListener" name="lib/client-side/cookie/cookie-consent addRejectCookieConsentListener" time="0.021">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent cookieConsentHandler return early if required element is undefined" name="lib/client-side/cookie/cookie-consent cookieConsentHandler return early if required element is undefined" time="0.006">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent cookieConsentHandler return early if required element is undefined" name="lib/client-side/cookie/cookie-consent cookieConsentHandler return early if required element is undefined" time="0.002">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent cookieConsentHandler cookie policy has already been set" name="lib/client-side/cookie/cookie-consent cookieConsentHandler cookie policy has already been set" time="0.002">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent cookieConsentHandler cookie policy has not yet been set" name="lib/client-side/cookie/cookie-consent cookieConsentHandler cookie policy has not yet been set" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/submission" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="0.291" tests="6">
    <testcase classname="controllers/appellant-submission/submission getSubmission should call the correct template" name="controllers/appellant-submission/submission getSubmission should call the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/submission postSubmission should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/submission postSubmission should re-render the template with errors if submission validation fails" time="0.003">
    </testcase>
    <testcase classname="controllers/appellant-submission/submission postSubmission should re-render the template with errors if there is any appeals api call error" name="controllers/appellant-submission/submission postSubmission should re-render the template with errors if there is any appeals api call error" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/submission postSubmission should re-render the template with errors if there is any pdf api call error" name="controllers/appellant-submission/submission postSubmission should re-render the template with errors if there is any pdf api call error" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/submission postSubmission should redirect back to /submission if validation passes but `i-agree` not given" name="controllers/appellant-submission/submission postSubmission should redirect back to /submission if validation passes but `i-agree` not given" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/submission postSubmission should redirect if valid" name="controllers/appellant-submission/submission postSubmission should redirect if valid" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/upload-decision" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="0.238" tests="10">
    <testcase classname="validators/appellant-submission/upload-decision rules has a rule for `decision-upload`" name="validators/appellant-submission/upload-decision rules has a rule for `decision-upload`" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision rules should have the expected number of configured rules" name="validators/appellant-submission/upload-decision rules should have the expected number of configured rules" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision validator should return the expected validation outcome - already submitted / undefined / empty - pass " name="validators/appellant-submission/upload-decision validator should return the expected validation outcome - already submitted / undefined / empty - pass " time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision validator should return the expected validation outcome - already submitted / files key is empty - pass" name="validators/appellant-submission/upload-decision validator should return the expected validation outcome - already submitted / files key is empty - pass" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision validator should return the expected validation outcome - already submitted / files path is not matched - pass" name="validators/appellant-submission/upload-decision validator should return the expected validation outcome - already submitted / files path is not matched - pass" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision validator should return the expected validation outcome - never submitted / undefined / empty - fail " name="validators/appellant-submission/upload-decision validator should return the expected validation outcome - never submitted / undefined / empty - fail " time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision validator should return the expected validation outcome - never submitted / files key is empty - fail" name="validators/appellant-submission/upload-decision validator should return the expected validation outcome - never submitted / files key is empty - fail" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision validator should return the expected validation outcome - files path is matched but mime type is wrong - fail" name="validators/appellant-submission/upload-decision validator should return the expected validation outcome - files path is matched but mime type is wrong - fail" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision validator should return the expected validation outcome - files path is matched but file size is too big - fail" name="validators/appellant-submission/upload-decision validator should return the expected validation outcome - files path is matched but file size is too big - fail" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision validator should return the expected validation outcome - valid file - pass" name="validators/appellant-submission/upload-decision validator should return the expected validation outcome - valid file - pass" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/applicant-name" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="0.194" tests="4">
    <testcase classname="controllers/appellant-submission/applicant-name getApplicantName should call the correct template" name="controllers/appellant-submission/applicant-name getApplicantName should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/applicant-name postApplicantName should re-render the template with errors if there is any validator error" name="controllers/appellant-submission/applicant-name postApplicantName should re-render the template with errors if there is any validator error" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/applicant-name postApplicantName should re-render the template with errors if there is any api call error" name="controllers/appellant-submission/applicant-name postApplicantName should re-render the template with errors if there is any api call error" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/applicant-name postApplicantName should redirect to the task list if valid" name="controllers/appellant-submission/applicant-name postApplicantName should redirect to the task list if valid" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/site-location" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="0.185" tests="4">
    <testcase classname="controllers/appellant-submission/site-location getSiteLocation should call the correct template" name="controllers/appellant-submission/site-location getSiteLocation should call the correct template" time="0.006">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-location postSiteLocation should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/site-location postSiteLocation should re-render the template with errors if submission validation fails" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-location postSiteLocation should log an error if the api call fails, and remain on the same page" name="controllers/appellant-submission/site-location postSiteLocation should log an error if the api call fails, and remain on the same page" time="0.002">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-location postSiteLocation should redirect to `/appellant-submission/site-ownership` if valid" name="controllers/appellant-submission/site-location postSiteLocation should redirect to `/appellant-submission/site-ownership` if valid" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="lib/documents-api-wrapper" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="0.332" tests="11">
    <testcase classname="lib/documents-api-wrapper createDocument should throw if fetch fails" name="lib/documents-api-wrapper createDocument should throw if fetch fails" time="0.014">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should throw if the remote API response is not ok" name="lib/documents-api-wrapper createDocument should throw if the remote API response is not ok" time="0.007">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should throw if the response code is anything other than a 202" name="lib/documents-api-wrapper createDocument should throw if the response code is anything other than a 202" time="0.001">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should throw if the document response is missing an `id`" name="lib/documents-api-wrapper createDocument should throw if the document response is missing an `id`" time="0">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should throw if the document response &apos;id&apos; is null" name="lib/documents-api-wrapper createDocument should throw if the document response &apos;id&apos; is null" time="0">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should throw if the document response &apos;id&apos; is undefined" name="lib/documents-api-wrapper createDocument should throw if the document response &apos;id&apos; is undefined" time="0.001">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should throw if the document response &apos;id&apos; is null" name="lib/documents-api-wrapper createDocument should throw if the document response &apos;id&apos; is null" time="0">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should throw if the document response &apos;id&apos; is undefined" name="lib/documents-api-wrapper createDocument should throw if the document response &apos;id&apos; is undefined" time="0">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should return the expected response if the fetch status is 202 with form data input" name="lib/documents-api-wrapper createDocument should return the expected response if the fetch status is 202 with form data input" time="0.001">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should return the expected response if the fetch status is 202 with form data input with name overrided" name="lib/documents-api-wrapper createDocument should return the expected response if the fetch status is 202 with form data input with name overrided" time="0">
    </testcase>
    <testcase classname="lib/documents-api-wrapper createDocument should return the expected response if the fetch status is 202 with data buffer input" name="lib/documents-api-wrapper createDocument should return the expected response if the fetch status is 202 with data buffer input" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/site-ownership-certb" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="1.456" tests="4">
    <testcase classname="controllers/appellant-submission/site-ownership-certb getSiteOwnershipCertB should call the correct template" name="controllers/appellant-submission/site-ownership-certb getSiteOwnershipCertB should call the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership-certb postSiteOwnershipCertB should re-render the template with errors if there is any validation error" name="controllers/appellant-submission/site-ownership-certb postSiteOwnershipCertB should re-render the template with errors if there is any validation error" time="0.005">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership-certb postSiteOwnershipCertB should re-render the template with errors if there is any api call error" name="controllers/appellant-submission/site-ownership-certb postSiteOwnershipCertB should re-render the template with errors if there is any api call error" time="0.016">
    </testcase>
    <testcase classname="controllers/appellant-submission/site-ownership-certb postSiteOwnershipCertB should redirect to the next valid url if valid" name="controllers/appellant-submission/site-ownership-certb postSiteOwnershipCertB should redirect to the next valid url if valid" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="controllers/eligibility/listed-building" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="1.587" tests="6">
    <testcase classname="controllers/eligibility/listed-building getServiceNotAvailableForListedBuildings calls the correct template" name="controllers/eligibility/listed-building getServiceNotAvailableForListedBuildings calls the correct template" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/listed-building getListedBuilding calls the correct template" name="controllers/eligibility/listed-building getListedBuilding calls the correct template" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/listed-building postListedBuilding should re-render the template with errors if there is any validation error" name="controllers/eligibility/listed-building postListedBuilding should re-render the template with errors if there is any validation error" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/listed-building postListedBuilding should re-render the template with errors if there is any api call error" name="controllers/eligibility/listed-building postListedBuilding should re-render the template with errors if there is any api call error" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/listed-building postListedBuilding should redirect to `/eligibility/listed-out` if `is-your-appeal-about-a-listed-building` is `yes`" name="controllers/eligibility/listed-building postListedBuilding should redirect to `/eligibility/listed-out` if `is-your-appeal-about-a-listed-building` is `yes`" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/listed-building postListedBuilding should redirect to `/eligibility/costs` if `is-your-appeal-about-a-listed-building` is `no`" name="controllers/eligibility/listed-building postListedBuilding should redirect to `/eligibility/costs` if `is-your-appeal-about-a-listed-building` is `no`" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/application-number" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="1.63" tests="4">
    <testcase classname="controllers/appellant-submission/application-number getApplicationNumber should call the correct template" name="controllers/appellant-submission/application-number getApplicationNumber should call the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/application-number postApplicationNumber should re-render the template with errors if submission validation fails" name="controllers/appellant-submission/application-number postApplicationNumber should re-render the template with errors if submission validation fails" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/application-number postApplicationNumber should log an error if the api call fails, and remain on the same page" name="controllers/appellant-submission/application-number postApplicationNumber should log an error if the api call fails, and remain on the same page" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/application-number postApplicationNumber should redirect to `/appellant-submission/upload-application` if valid" name="controllers/appellant-submission/application-number postApplicationNumber should redirect to `/appellant-submission/upload-application` if valid" time="0.114">
    </testcase>
  </testsuite>
  <testsuite name="controllers/eligibility/enforcement-notice" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:53" time="2.475" tests="6">
    <testcase classname="controllers/eligibility/enforcement-notice getServiceNotAvailableWhenReceivedEnforcementNotice calls the correct template" name="controllers/eligibility/enforcement-notice getServiceNotAvailableWhenReceivedEnforcementNotice calls the correct template" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/enforcement-notice getEnforcementNotice should call the correct template" name="controllers/eligibility/enforcement-notice getEnforcementNotice should call the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/enforcement-notice postEnforcementNotice should re-render the template with errors if there is any validation error" name="controllers/eligibility/enforcement-notice postEnforcementNotice should re-render the template with errors if there is any validation error" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/enforcement-notice postEnforcementNotice should re-render the template with errors if there is any api call error" name="controllers/eligibility/enforcement-notice postEnforcementNotice should re-render the template with errors if there is any api call error" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/enforcement-notice postEnforcementNotice should redirect to `/eligibility/enforcement-notice-out` if `enforcement-notice` is `yes`" name="controllers/eligibility/enforcement-notice postEnforcementNotice should redirect to `/eligibility/enforcement-notice-out` if `enforcement-notice` is `yes`" time="0">
    </testcase>
    <testcase classname="controllers/eligibility/enforcement-notice postEnforcementNotice should redirect to `/eligibility/listed-building` if `enforcement-notice` is `no`" name="controllers/eligibility/enforcement-notice postEnforcementNotice should redirect to `/eligibility/listed-building` if `enforcement-notice` is `no`" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/appeal-statement-schema" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:54" time="1.49" tests="9">
    <testcase classname="validators/appellant-submission/appeal-statement-schema has a defined custom schema object" name="validators/appellant-submission/appeal-statement-schema has a defined custom schema object" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should return true if `req.files` is undefined and one appeal was previously submitted" name="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should return true if `req.files` is undefined and one appeal was previously submitted" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should return true if `req.files` is empty and one appeal was previously submitted" name="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should return true if `req.files` is empty and one appeal was previously submitted" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should return true if `req.files[path]` is not matched and one appeal was previously submitted" name="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should return true if `req.files[path]` is not matched and one appeal was previously submitted" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should throw error if `req.files` is undefined and no appeal was previously submitted" name="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should throw error if `req.files` is undefined and no appeal was previously submitted" time="0.152">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should throw error if `req.files` is empty and no appeal was previously submitted" name="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should throw error if `req.files` is empty and no appeal was previously submitted" time="0.005">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should throw error if `req.files[path]` is not matched and no appeal was previously submitted" name="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should throw error if `req.files[path]` is not matched and no appeal was previously submitted" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should call the validMimeType validator" name="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should call the validMimeType validator" time="0.036">
    </testcase>
    <testcase classname="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should call the validateFileSize validator" name="validators/appellant-submission/appeal-statement-schema schema[&apos;appeal-upload&apos;].custom.options should call the validateFileSize validator" time="0.071">
    </testcase>
  </testsuite>
  <testsuite name="middleware/fetch-appeal-by-url-param" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:54" time="1.719" tests="5">
    <testcase classname="middleware/fetch-appeal-by-url-param req.params[appealKey] is undefined" name="middleware/fetch-appeal-by-url-param req.params[appealKey] is undefined" time="0">
    </testcase>
    <testcase classname="middleware/fetch-appeal-by-url-param req.params[appealKey] is not found in req.params" name="middleware/fetch-appeal-by-url-param req.params[appealKey] is not found in req.params" time="0.001">
    </testcase>
    <testcase classname="middleware/fetch-appeal-by-url-param req.params[appealKey] is found but value is undefined" name="middleware/fetch-appeal-by-url-param req.params[appealKey] is found but value is undefined" time="0">
    </testcase>
    <testcase classname="middleware/fetch-appeal-by-url-param req.params[appealKey] is found but getExistingAppeal fails" name="middleware/fetch-appeal-by-url-param req.params[appealKey] is found but getExistingAppeal fails" time="0.001">
    </testcase>
    <testcase classname="middleware/fetch-appeal-by-url-param req.params[appealKey] is found and getExistingAppeal succeeds" name="middleware/fetch-appeal-by-url-param req.params[appealKey] is found and getExistingAppeal succeeds" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/claim-costs" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:54" time="2.251" tests="6">
    <testcase classname="controllers/appellant-submission/claim-costs getCosts should call the correct template" name="controllers/appellant-submission/claim-costs getCosts should call the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/claim-costs getCostsOut should call the correct template" name="controllers/appellant-submission/claim-costs getCostsOut should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/claim-costs postCosts should re-render the template with errors if there is any validation error" name="controllers/appellant-submission/claim-costs postCosts should re-render the template with errors if there is any validation error" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/claim-costs postCosts should re-render the template with errors if there is any api call error" name="controllers/appellant-submission/claim-costs postCosts should re-render the template with errors if there is any api call error" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/claim-costs postCosts should redirect to /eligibility/appeal-statement if does not claiming costs" name="controllers/appellant-submission/claim-costs postCosts should redirect to /eligibility/appeal-statement if does not claiming costs" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/claim-costs postCosts should redirect to /eligibility/costs-out if claiming costs" name="controllers/appellant-submission/claim-costs postCosts should redirect to /eligibility/costs-out if claiming costs" time="0">
    </testcase>
  </testsuite>
  <testsuite name="middleware/req-files-to-req-body-files" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:55" time="1.898" tests="7">
    <testcase classname="middleware/req-files-to-req-body-files should return early if `req.body` is not set" name="middleware/req-files-to-req-body-files should return early if `req.body` is not set" time="0.087">
    </testcase>
    <testcase classname="middleware/req-files-to-req-body-files should return early if `req.files` is not set" name="middleware/req-files-to-req-body-files should return early if `req.files` is not set" time="0.001">
    </testcase>
    <testcase classname="middleware/req-files-to-req-body-files should set `req.body.files = []` if unable to find the given file property path `req.files` - unset" name="middleware/req-files-to-req-body-files should set `req.body.files = []` if unable to find the given file property path `req.files` - unset" time="0">
    </testcase>
    <testcase classname="middleware/req-files-to-req-body-files should set `req.body.files = []` if unable to find the given file property path `req.files` - wrong path" name="middleware/req-files-to-req-body-files should set `req.body.files = []` if unable to find the given file property path `req.files` - wrong path" time="0">
    </testcase>
    <testcase classname="middleware/req-files-to-req-body-files should set `req.body.files = [req.files]` when given a single file" name="middleware/req-files-to-req-body-files should set `req.body.files = [req.files]` when given a single file" time="0.001">
    </testcase>
    <testcase classname="middleware/req-files-to-req-body-files should set `req.body.files = [...req.files]` when given multiple files" name="middleware/req-files-to-req-body-files should set `req.body.files = [...req.files]` when given multiple files" time="0">
    </testcase>
    <testcase classname="middleware/req-files-to-req-body-files should retain existing req.body.files when working with a different key" name="middleware/req-files-to-req-body-files should retain existing req.body.files when working with a different key" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/upload-decision-schema" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:55" time="1.917" tests="9">
    <testcase classname="validators/appellant-submission/upload-decision-schema has a defined custom schema object" name="validators/appellant-submission/upload-decision-schema has a defined custom schema object" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should throw an error if `req.files` is undefined and no planning application was submitted" name="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should throw an error if `req.files` is undefined and no planning application was submitted" time="0.1">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should throw an error if `req.files` is empty and no planning application was submitted" name="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should throw an error if `req.files` is empty and no planning application was submitted" time="0.073">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should throw an error if `req.files[path]` is not matched and no planning application was submitted" name="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should throw an error if `req.files[path]` is not matched and no planning application was submitted" time="0.053">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should return true if `req.files` is undefined but a decision letter was previously submitted" name="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should return true if `req.files` is undefined but a decision letter was previously submitted" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should return true if `req.files` is empty but a decision letter  was previously submitted" name="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should return true if `req.files` is empty but a decision letter  was previously submitted" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should return true if `req.files[path]` is not matched but a decision letter  was previously submitted" name="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should return true if `req.files[path]` is not matched but a decision letter  was previously submitted" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should call the validMimeType validator" name="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should call the validMimeType validator" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should call the validateFileSize validator" name="validators/appellant-submission/upload-decision-schema schema[&apos;decision-upload&apos;].custom.options should call the validateFileSize validator" time="0">
    </testcase>
  </testsuite>
  <testsuite name="controllers/eligibility/granted-or-refused-permission" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:56" time="2.1" tests="4">
    <testcase classname="controllers/eligibility/granted-or-refused-permission getGrantedOrRefusedPlanningPermission should call the correct template" name="controllers/eligibility/granted-or-refused-permission getGrantedOrRefusedPlanningPermission should call the correct template" time="0.057">
    </testcase>
    <testcase classname="controllers/eligibility/granted-or-refused-permission postGrantedOrRefusedPlanningPermission should re-render the template with errors if there is any validation error" name="controllers/eligibility/granted-or-refused-permission postGrantedOrRefusedPlanningPermission should re-render the template with errors if there is any validation error" time="0.003">
    </testcase>
    <testcase classname="controllers/eligibility/granted-or-refused-permission postGrantedOrRefusedPlanningPermission should re-render the template with errors if there is any api call error" name="controllers/eligibility/granted-or-refused-permission postGrantedOrRefusedPlanningPermission should re-render the template with errors if there is any api call error" time="0.001">
    </testcase>
    <testcase classname="controllers/eligibility/granted-or-refused-permission postGrantedOrRefusedPlanningPermission &apos;should redirect to &apos;/eligibility/decision-date&apos; if &apos;planningPermissionStatus&apos; is &apos;refused&apos;" name="controllers/eligibility/granted-or-refused-permission postGrantedOrRefusedPlanningPermission &apos;should redirect to &apos;/eligibility/decision-date&apos; if &apos;planningPermissionStatus&apos; is &apos;refused&apos;" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/have-other-owners-been-told-certb" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:56" time="2.69" tests="7">
    <testcase classname="validators/appellant-submission/have-other-owners-been-told-certb rules is configured with the expected rules" name="validators/appellant-submission/have-other-owners-been-told-certb rules is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/have-other-owners-been-told-certb rules ruleSiteOwnershipCertB is configured with the expected rules" name="validators/appellant-submission/have-other-owners-been-told-certb rules ruleSiteOwnershipCertB is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/have-other-owners-been-told-certb validator should return the expected validation outcome - undefined - empty" name="validators/appellant-submission/have-other-owners-been-told-certb validator should return the expected validation outcome - undefined - empty" time="0.087">
    </testcase>
    <testcase classname="validators/appellant-submission/have-other-owners-been-told-certb validator should return the expected validation outcome - invalid value for `have-other-owners-been-told` - fail" name="validators/appellant-submission/have-other-owners-been-told-certb validator should return the expected validation outcome - invalid value for `have-other-owners-been-told` - fail" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/have-other-owners-been-told-certb validator should return the expected validation outcome - valid value for `have-other-owners-been-told` - &quot;yes&quot; - pass" name="validators/appellant-submission/have-other-owners-been-told-certb validator should return the expected validation outcome - valid value for `have-other-owners-been-told` - &quot;yes&quot; - pass" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/have-other-owners-been-told-certb validator should return the expected validation outcome - valid value for `have-other-owners-been-told` - &quot;no&quot; - pass" name="validators/appellant-submission/have-other-owners-been-told-certb validator should return the expected validation outcome - valid value for `have-other-owners-been-told` - &quot;no&quot; - pass" time="0.379">
    </testcase>
    <testcase classname="validators/appellant-submission/have-other-owners-been-told-certb validSiteOwnershipCertBOptions should define the expected valid site ownership cert B options" name="validators/appellant-submission/have-other-owners-been-told-certb validSiteOwnershipCertBOptions should define the expected valid site ownership cert B options" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/site-ownership" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:59" time="1.371" tests="7">
    <testcase classname="validators/appellant-submission/site-ownership rules is configured with the expected rules" name="validators/appellant-submission/site-ownership rules is configured with the expected rules" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/site-ownership rules ruleSiteOwnership is configured with the expected rules" name="validators/appellant-submission/site-ownership rules ruleSiteOwnership is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-ownership validator should return the expected validation outcome - undefined - empty" name="validators/appellant-submission/site-ownership validator should return the expected validation outcome - undefined - empty" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-ownership validator should return the expected validation outcome - invalid value for `site-ownership` - fail" name="validators/appellant-submission/site-ownership validator should return the expected validation outcome - invalid value for `site-ownership` - fail" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/site-ownership validator should return the expected validation outcome - valid value for `site-ownership` - &quot;yes&quot; - pass" name="validators/appellant-submission/site-ownership validator should return the expected validation outcome - valid value for `site-ownership` - &quot;yes&quot; - pass" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/site-ownership validator should return the expected validation outcome - valid value for `site-ownership` - &quot;no&quot; - pass" name="validators/appellant-submission/site-ownership validator should return the expected validation outcome - valid value for `site-ownership` - &quot;no&quot; - pass" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/site-ownership validSiteOwnershipOptions should define the expected valid site ownership options" name="validators/appellant-submission/site-ownership validSiteOwnershipOptions should define the expected valid site ownership options" time="0">
    </testcase>
  </testsuite>
  <testsuite name="views/macros/multifile-upload-to-list" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:57" time="2.962" tests="9">
    <testcase classname="views/macros/multifile-upload-to-list No files uploaded nothing provided" name="views/macros/multifile-upload-to-list No files uploaded nothing provided" time="0.241">
    </testcase>
    <testcase classname="views/macros/multifile-upload-to-list No files uploaded when value has a length of less than one and attributes is empty" name="views/macros/multifile-upload-to-list No files uploaded when value has a length of less than one and attributes is empty" time="0.004">
    </testcase>
    <testcase classname="views/macros/multifile-upload-to-list No files uploaded when value is not provided and attributes has data-cy tag" name="views/macros/multifile-upload-to-list No files uploaded when value is not provided and attributes has data-cy tag" time="0.003">
    </testcase>
    <testcase classname="views/macros/multifile-upload-to-list single file uploaded no attributes given" name="views/macros/multifile-upload-to-list single file uploaded no attributes given" time="0.31">
    </testcase>
    <testcase classname="views/macros/multifile-upload-to-list single file uploaded attributes given, but no data-cy tag" name="views/macros/multifile-upload-to-list single file uploaded attributes given, but no data-cy tag" time="0.085">
    </testcase>
    <testcase classname="views/macros/multifile-upload-to-list single file uploaded attributes given with data-cy tag" name="views/macros/multifile-upload-to-list single file uploaded attributes given with data-cy tag" time="0.05">
    </testcase>
    <testcase classname="views/macros/multifile-upload-to-list multiple files uploaded no attributes given" name="views/macros/multifile-upload-to-list multiple files uploaded no attributes given" time="0.011">
    </testcase>
    <testcase classname="views/macros/multifile-upload-to-list multiple files uploaded attributes given, but no data-cy tag" name="views/macros/multifile-upload-to-list multiple files uploaded attributes given, but no data-cy tag" time="0.085">
    </testcase>
    <testcase classname="views/macros/multifile-upload-to-list multiple files uploaded attributes given with data-cy tag" name="views/macros/multifile-upload-to-list multiple files uploaded attributes given with data-cy tag" time="0.22">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/submission-information" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:58" time="2.582" tests="5">
    <testcase classname="controllers/appellant-submission/submission-information getSubmissionInformation should return 400 if appeal id not provided" name="controllers/appellant-submission/submission-information getSubmissionInformation should return 400 if appeal id not provided" time="0.129">
    </testcase>
    <testcase classname="controllers/appellant-submission/submission-information getSubmissionInformation should return 404 if appeal not found" name="controllers/appellant-submission/submission-information getSubmissionInformation should return 404 if appeal not found" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/submission-information getSubmissionInformation should return 400 if the LPD is not found for the given LPA" name="controllers/appellant-submission/submission-information getSubmissionInformation should return 400 if the LPD is not found for the given LPA" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/submission-information getSubmissionInformation should define default value if appeal submission date is not defined" name="controllers/appellant-submission/submission-information getSubmissionInformation should define default value if appeal submission date is not defined" time="0.188">
    </testcase>
    <testcase classname="controllers/appellant-submission/submission-information getSubmissionInformation should call the correct template with the expected data on the happy path" name="controllers/appellant-submission/submission-information getSubmissionInformation should call the correct template with the expected data on the happy path" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/upload-application-schema" errors="0" failures="3" skipped="0" timestamp="2021-09-19T20:20:55" time="1.987" tests="10">
    <testcase classname="validators/appellant-submission/upload-application-schema has a defined custom schema object" name="validators/appellant-submission/upload-application-schema has a defined custom schema object" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should throw an error if `req.files` is undefined and no planning application was submitted" name="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should throw an error if `req.files` is undefined and no planning application was submitted" time="0.005">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should throw an error if `req.files` is empty and no planning application was submitted" name="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should throw an error if `req.files` is empty and no planning application was submitted" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should throw an error if `req.files[path]` is not matched and no planning application was submitted" name="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should throw an error if `req.files[path]` is not matched and no planning application was submitted" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should return true if `req.files` is undefined but an application was previously submitted" name="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should return true if `req.files` is undefined but an application was previously submitted" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should return true if `req.files` is empty but an application was previously submitted" name="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should return true if `req.files` is empty but an application was previously submitted" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should return true if `req.files[path]` is not matched but an application was previously submitted" name="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should return true if `req.files[path]` is not matched but an application was previously submitted" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should call the validMimeType validator" name="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should call the validMimeType validator" time="0.001">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: &quot;image/png&quot;, [&quot;application/msword&quot;, &quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;, &quot;application/pdf&quot;, &quot;image/jpeg&quot;, &quot;image/tiff&quot;, &quot;image/png&quot;], &quot;The selected file must be a DOC, DOCX, PDF, TIF, JPG or PNG&quot;

Number of calls: 0
    at Object.&lt;anonymous&gt; (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application-schema.test.js:90:29)
    at Object.asyncJestTest (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:106:37)
    at /Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/node_modules/jest-jasmine2/build/queueRunner.js:45:12
    at new Promise (&lt;anonymous&gt;)
    at mapper (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/node_modules/jest-jasmine2/build/queueRunner.js:28:19)
    at /Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/node_modules/jest-jasmine2/build/queueRunner.js:75:41
    at processTicksAndRejections (internal/process/task_queues.js:95:5)</failure>
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should call the validateFileSize validator" name="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should call the validateFileSize validator" time="0">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: 12345, 1073741824

Number of calls: 0
    at Object.&lt;anonymous&gt; (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application-schema.test.js:113:34)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)</failure>
    </testcase>
    <testcase classname="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should call the validateFileSize validator" name="validators/appellant-submission/upload-application-schema schema[&apos;application-upload&apos;].custom.options should call the validateFileSize validator" time="0">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: 12345, 1073741824

Number of calls: 0
    at Object.&lt;anonymous&gt; (/Users/ray/WebstormProjects/appeal-planning-decision/packages/forms-web-app/__tests__/unit/validators/appellant-submission/upload-application-schema.test.js:113:34)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="validators/eligibility/costs" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:00" time="2.31" tests="7">
    <testcase classname="validators/eligibility/costs rules is configured with the expected rules" name="validators/eligibility/costs rules is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/eligibility/costs rules ruleCosts is configured with the expected rules" name="validators/eligibility/costs rules ruleCosts is configured with the expected rules" time="0">
    </testcase>
    <testcase classname="validators/eligibility/costs validator should return the expected validation outcome - undefined - empty" name="validators/eligibility/costs validator should return the expected validation outcome - undefined - empty" time="0.488">
    </testcase>
    <testcase classname="validators/eligibility/costs validator should return the expected validation outcome - invalid value for `claim-costs` - fail" name="validators/eligibility/costs validator should return the expected validation outcome - invalid value for `claim-costs` - fail" time="0.001">
    </testcase>
    <testcase classname="validators/eligibility/costs validator should return the expected validation outcome - valid value for `claim-costs` - &quot;yes&quot; - pass" name="validators/eligibility/costs validator should return the expected validation outcome - valid value for `claim-costs` - &quot;yes&quot; - pass" time="0">
    </testcase>
    <testcase classname="validators/eligibility/costs validator should return the expected validation outcome - valid value for `claim-costs` - &quot;no&quot; - pass" name="validators/eligibility/costs validator should return the expected validation outcome - valid value for `claim-costs` - &quot;no&quot; - pass" time="0.001">
    </testcase>
    <testcase classname="validators/eligibility/costs validClaimCostsOptions should define the expected valid claim costs options" name="validators/eligibility/costs validClaimCostsOptions should define the expected valid claim costs options" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/eligibility/householder-planning-permission`" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:01" time="2.067" tests="6">
    <testcase classname="validators/eligibility/householder-planning-permission` rules is configured with the expected rules" name="validators/eligibility/householder-planning-permission` rules is configured with the expected rules" time="0.03">
    </testcase>
    <testcase classname="validators/eligibility/householder-planning-permission` rules ruleHouseholderPlanningPermission is configured with the expected rules" name="validators/eligibility/householder-planning-permission` rules ruleHouseholderPlanningPermission is configured with the expected rules" time="0.005">
    </testcase>
    <testcase classname="validators/eligibility/householder-planning-permission` validator should return the expected validation outcome - No selection made on the householder planning permission question" name="validators/eligibility/householder-planning-permission` validator should return the expected validation outcome - No selection made on the householder planning permission question" time="0.007">
    </testcase>
    <testcase classname="validators/eligibility/householder-planning-permission` validator should return the expected validation outcome - User selected `yes` on the householder planning permission question" name="validators/eligibility/householder-planning-permission` validator should return the expected validation outcome - User selected `yes` on the householder planning permission question" time="0.002">
    </testcase>
    <testcase classname="validators/eligibility/householder-planning-permission` validator should return the expected validation outcome - User selected `no` on the householder planning permission question" name="validators/eligibility/householder-planning-permission` validator should return the expected validation outcome - User selected `no` on the householder planning permission question" time="0.002">
    </testcase>
    <testcase classname="validators/eligibility/householder-planning-permission` validHouseholderPlanningPermissionOptions should define the expected valid householder planning permission options" name="validators/eligibility/householder-planning-permission` validHouseholderPlanningPermissionOptions should define the expected valid householder planning permission options" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="lib/appeals-api-wrapper" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:00" time="1.807" tests="5">
    <testcase classname="lib/appeals-api-wrapper createOrUpdateAppeal should POST when a id is missing" name="lib/appeals-api-wrapper createOrUpdateAppeal should POST when a id is missing" time="0.002">
    </testcase>
    <testcase classname="lib/appeals-api-wrapper createOrUpdateAppeal should PUT when a id is provided" name="lib/appeals-api-wrapper createOrUpdateAppeal should PUT when a id is provided" time="0.001">
    </testcase>
    <testcase classname="lib/appeals-api-wrapper createOrUpdateAppeal should gracefully handle a fetch failure" name="lib/appeals-api-wrapper createOrUpdateAppeal should gracefully handle a fetch failure" time="0">
    </testcase>
    <testcase classname="lib/appeals-api-wrapper getExistingAppeal should call the expected URL" name="lib/appeals-api-wrapper getExistingAppeal should call the expected URL" time="0.001">
    </testcase>
    <testcase classname="lib/appeals-api-wrapper getLPAList should call the expected URL" name="lib/appeals-api-wrapper getLPAList should call the expected URL" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/supporting-documents" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:20:58" time="2.886" tests="8">
    <testcase classname="validators/appellant-submission/supporting-documents rules has a rule for `files.supporting-documents.*`" name="validators/appellant-submission/supporting-documents rules has a rule for `files.supporting-documents.*`" time="0.147">
    </testcase>
    <testcase classname="validators/appellant-submission/supporting-documents rules should have the expected number of configured rules" name="validators/appellant-submission/supporting-documents rules should have the expected number of configured rules" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - undefined / empty - pass " name="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - undefined / empty - pass " time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - files key is empty - pass" name="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - files key is empty - pass" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - files path is not matched - pass" name="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - files path is not matched - pass" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - files path is matched but mime type is wrong - fail" name="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - files path is matched but mime type is wrong - fail" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - files path is matched but file size is too big - fail" name="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - files path is matched but file size is too big - fail" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - valid file - pass" name="validators/appellant-submission/supporting-documents validator should return the expected validation outcome - valid file - pass" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/eligibility/listed-building" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:02" time="1.87" tests="6">
    <testcase classname="validators/eligibility/listed-building rules is configured with the expected rules" name="validators/eligibility/listed-building rules is configured with the expected rules" time="0.018">
    </testcase>
    <testcase classname="validators/eligibility/listed-building validator should return the expected validation outcome - undefined - empty" name="validators/eligibility/listed-building validator should return the expected validation outcome - undefined - empty" time="0.053">
    </testcase>
    <testcase classname="validators/eligibility/listed-building validator should return the expected validation outcome - invalid value - fail" name="validators/eligibility/listed-building validator should return the expected validation outcome - invalid value - fail" time="0.021">
    </testcase>
    <testcase classname="validators/eligibility/listed-building validator should return the expected validation outcome - valid value - &quot;yes&quot; - pass" name="validators/eligibility/listed-building validator should return the expected validation outcome - valid value - &quot;yes&quot; - pass" time="0">
    </testcase>
    <testcase classname="validators/eligibility/listed-building validator should return the expected validation outcome - valid value - &quot;no&quot; - pass" name="validators/eligibility/listed-building validator should return the expected validation outcome - valid value - &quot;no&quot; - pass" time="0">
    </testcase>
    <testcase classname="validators/eligibility/listed-building validIsListedBuildingOptions should define the expected valid listed building options" name="validators/eligibility/listed-building validIsListedBuildingOptions should define the expected valid listed building options" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/planning-department" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:02" time="1.193" tests="5">
    <testcase classname="validators/planning-department rules is configured with the expected rules" name="validators/planning-department rules is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/planning-department validator should return the expected validation outcome - eligible local planning department provided" name="validators/planning-department validator should return the expected validation outcome - eligible local planning department provided" time="0.001">
    </testcase>
    <testcase classname="validators/planning-department validator should return the expected validation outcome - ineligible local planning department provided" name="validators/planning-department validator should return the expected validation outcome - ineligible local planning department provided" time="0">
    </testcase>
    <testcase classname="validators/planning-department validator should return the expected validation outcome - local planning department is not provided" name="validators/planning-department validator should return the expected validation outcome - local planning department is not provided" time="0.001">
    </testcase>
    <testcase classname="validators/planning-department validator should return the expected validation outcome - unknown local planning department is provided" name="validators/planning-department validator should return the expected validation outcome - unknown local planning department is provided" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/eligibility/granted-or-refused-permission" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:05" time="1.48" tests="5">
    <testcase classname="validators/eligibility/granted-or-refused-permission rules is configured with the expected rules" name="validators/eligibility/granted-or-refused-permission rules is configured with the expected rules" time="0.014">
    </testcase>
    <testcase classname="validators/eligibility/granted-or-refused-permission ruleGrantedOrRefusedPermission is configured with the expected rules" name="validators/eligibility/granted-or-refused-permission ruleGrantedOrRefusedPermission is configured with the expected rules" time="0.006">
    </testcase>
    <testcase classname="validators/eligibility/granted-or-refused-permission validator should return the expected validation outcome - No selection made on the granted or refused permission question" name="validators/eligibility/granted-or-refused-permission validator should return the expected validation outcome - No selection made on the granted or refused permission question" time="0.001">
    </testcase>
    <testcase classname="validators/eligibility/granted-or-refused-permission validator should return the expected validation outcome - User selected `refused` on the householder planning permission question" name="validators/eligibility/granted-or-refused-permission validator should return the expected validation outcome - User selected `refused` on the householder planning permission question" time="0.001">
    </testcase>
    <testcase classname="validators/eligibility/granted-or-refused-permission validHouseholderPlanningPermissionStatusOptions should define the expected valid householder planning permission status options" name="validators/eligibility/granted-or-refused-permission validHouseholderPlanningPermissionStatusOptions should define the expected valid householder planning permission status options" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/eligibility/enforcement-notice`" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:06" time="0.838" tests="6">
    <testcase classname="validators/eligibility/enforcement-notice` rules is configured with the expected rules" name="validators/eligibility/enforcement-notice` rules is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/eligibility/enforcement-notice` rules ruleEnforcementNotice is configured with the expected rules" name="validators/eligibility/enforcement-notice` rules ruleEnforcementNotice is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/eligibility/enforcement-notice` validator should return the expected validation outcome - No selection made regarding receipt of an Enforcement Notice" name="validators/eligibility/enforcement-notice` validator should return the expected validation outcome - No selection made regarding receipt of an Enforcement Notice" time="0">
    </testcase>
    <testcase classname="validators/eligibility/enforcement-notice` validator should return the expected validation outcome - User selected `yes` to receiving an Enforcement Notice" name="validators/eligibility/enforcement-notice` validator should return the expected validation outcome - User selected `yes` to receiving an Enforcement Notice" time="0.001">
    </testcase>
    <testcase classname="validators/eligibility/enforcement-notice` validator should return the expected validation outcome - User selected `no` to receiving an Enforcement Notice" name="validators/eligibility/enforcement-notice` validator should return the expected validation outcome - User selected `no` to receiving an Enforcement Notice" time="0.013">
    </testcase>
    <testcase classname="validators/eligibility/enforcement-notice` validEnforcementNoticeOptions should define the expected valid enforcement notice options" name="validators/eligibility/enforcement-notice` validEnforcementNoticeOptions should define the expected valid enforcement notice options" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/application-number" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:04" time="1.627" tests="5">
    <testcase classname="validators/appellant-submission/application-number rules is configured with the expected rules" name="validators/appellant-submission/application-number rules is configured with the expected rules" time="0.02">
    </testcase>
    <testcase classname="validators/appellant-submission/application-number validator should return the expected validation outcome - valid planning application number provided" name="validators/appellant-submission/application-number validator should return the expected validation outcome - valid planning application number provided" time="0.015">
    </testcase>
    <testcase classname="validators/appellant-submission/application-number validator should return the expected validation outcome - planning application number not provided" name="validators/appellant-submission/application-number validator should return the expected validation outcome - planning application number not provided" time="0.001">
    </testcase>
    <testcase classname="validators/appellant-submission/application-number validator should return the expected validation outcome - planning application number provided but empty" name="validators/appellant-submission/application-number validator should return the expected validation outcome - planning application number provided but empty" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/application-number validator should return the expected validation outcome - planning application number provided but exceeds 30 characters" name="validators/appellant-submission/application-number validator should return the expected validation outcome - planning application number provided but exceeds 30 characters" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="lib/views" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:07" time="1.605" tests="1">
    <testcase classname="lib/views should have the expected defined constants" name="lib/views should have the expected defined constants" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="controllers/appellant-submission/appeal-statement" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:03" time="1.425" tests="5">
    <testcase classname="controllers/appellant-submission/appeal-statement getBeforeAppeal should call the correct template" name="controllers/appellant-submission/appeal-statement getBeforeAppeal should call the correct template" time="0.001">
    </testcase>
    <testcase classname="controllers/appellant-submission/appeal-statement getWhenAppeal should call the correct template" name="controllers/appellant-submission/appeal-statement getWhenAppeal should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/appeal-statement getAfterAppeal should call the correct template" name="controllers/appellant-submission/appeal-statement getAfterAppeal should call the correct template" time="0">
    </testcase>
    <testcase classname="controllers/appellant-submission/appeal-statement getStagesAppeal should call the correct template" name="controllers/appellant-submission/appeal-statement getStagesAppeal should call the correct template" time="0.005">
    </testcase>
    <testcase classname="controllers/appellant-submission/appeal-statement getStartAppeal should call the correct template" name="controllers/appellant-submission/appeal-statement getStartAppeal should call the correct template" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="lib/client-side/cookie/cookie-jar" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:04" time="2.028" tests="10">
    <testcase classname="lib/client-side/cookie/cookie-jar createCookie without days - gets default expiry" name="lib/client-side/cookie/cookie-jar createCookie without days - gets default expiry" time="0.002">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-jar createCookie with positive days" name="lib/client-side/cookie/cookie-jar createCookie with positive days" time="0.012">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-jar createCookie with 0 days" name="lib/client-side/cookie/cookie-jar createCookie with 0 days" time="0.001">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-jar createCookie with negative days" name="lib/client-side/cookie/cookie-jar createCookie with negative days" time="0">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-jar createCookie bad days - we all have them" name="lib/client-side/cookie/cookie-jar createCookie bad days - we all have them" time="0.002">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-jar createCookie secure cookies are implicitly set if in the production environment" name="lib/client-side/cookie/cookie-jar createCookie secure cookies are implicitly set if in the production environment" time="0.003">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-jar readCookie when cookie does not exist" name="lib/client-side/cookie/cookie-jar readCookie when cookie does not exist" time="0.016">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-jar readCookie when one cookie exists" name="lib/client-side/cookie/cookie-jar readCookie when one cookie exists" time="0.001">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-jar readCookie when many cookies exists" name="lib/client-side/cookie/cookie-jar readCookie when many cookies exists" time="0.13">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-jar eraseCookie" name="lib/client-side/cookie/cookie-jar eraseCookie" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="middleware/fetch-appeal-lpd-by-appeal-lpa-code" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:07" time="1.194" tests="4">
    <testcase classname="middleware/fetch-appeal-lpd-by-appeal-lpa-code req.session.appeal is undefined" name="middleware/fetch-appeal-lpd-by-appeal-lpa-code req.session.appeal is undefined" time="0.001">
    </testcase>
    <testcase classname="middleware/fetch-appeal-lpd-by-appeal-lpa-code req.session.appeal.lpaCode is undefined" name="middleware/fetch-appeal-lpd-by-appeal-lpa-code req.session.appeal.lpaCode is undefined" time="0">
    </testcase>
    <testcase classname="middleware/fetch-appeal-lpd-by-appeal-lpa-code getDepartmentFromId throws" name="middleware/fetch-appeal-lpd-by-appeal-lpa-code getDepartmentFromId throws" time="0.001">
    </testcase>
    <testcase classname="middleware/fetch-appeal-lpd-by-appeal-lpa-code happy path" name="middleware/fetch-appeal-lpd-by-appeal-lpa-code happy path" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/custom/file-size" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:09" time="1.95" tests="22">
    <testcase classname="validators/custom/file-size should be valid when given a smaller file size than the configured maximum" name="validators/custom/file-size should be valid when given a smaller file size than the configured maximum" time="0">
    </testcase>
    <testcase classname="validators/custom/file-size should be valid when given a file size that matches the configured maximum" name="validators/custom/file-size should be valid when given a file size that matches the configured maximum" time="0">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 1" name="validators/custom/file-size should throw when oversize generic file name - 1" time="0.001">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 2" name="validators/custom/file-size should throw when oversize generic file name - 2" time="0.001">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 2048" name="validators/custom/file-size should throw when oversize generic file name - 2048" time="0.172">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 1048577" name="validators/custom/file-size should throw when oversize generic file name - 1048577" time="0">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 1073741825" name="validators/custom/file-size should throw when oversize generic file name - 1073741825" time="0">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 1099511627777" name="validators/custom/file-size should throw when oversize generic file name - 1099511627777" time="0.001">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 1125899906842625" name="validators/custom/file-size should throw when oversize generic file name - 1125899906842625" time="0">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 1.1805916207174113e+21" name="validators/custom/file-size should throw when oversize generic file name - 1.1805916207174113e+21" time="0">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 1.2089258196146292e+24" name="validators/custom/file-size should throw when oversize generic file name - 1.2089258196146292e+24" time="0">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize generic file name - 1.2379400392853803e+27" name="validators/custom/file-size should throw when oversize generic file name - 1.2379400392853803e+27" time="0.021">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 1" name="validators/custom/file-size should throw when oversize specific file name - 1" time="0.006">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 2" name="validators/custom/file-size should throw when oversize specific file name - 2" time="0.001">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 2048" name="validators/custom/file-size should throw when oversize specific file name - 2048" time="0">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 1048577" name="validators/custom/file-size should throw when oversize specific file name - 1048577" time="0.001">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 1073741825" name="validators/custom/file-size should throw when oversize specific file name - 1073741825" time="0.001">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 1099511627777" name="validators/custom/file-size should throw when oversize specific file name - 1099511627777" time="0.037">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 1125899906842625" name="validators/custom/file-size should throw when oversize specific file name - 1125899906842625" time="0.023">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 1.1805916207174113e+21" name="validators/custom/file-size should throw when oversize specific file name - 1.1805916207174113e+21" time="0.008">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 1.2089258196146292e+24" name="validators/custom/file-size should throw when oversize specific file name - 1.2089258196146292e+24" time="0.012">
    </testcase>
    <testcase classname="validators/custom/file-size should throw when oversize specific file name - 1.2379400392853803e+27" name="validators/custom/file-size should throw when oversize specific file name - 1.2379400392853803e+27" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="middleware/fetch-existing-appeal" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:10" time="2.122" tests="5">
    <testcase classname="middleware/fetch-existing-appeal call next immediately if no session" name="middleware/fetch-existing-appeal call next immediately if no session" time="0.006">
    </testcase>
    <testcase classname="middleware/fetch-existing-appeal set empty appeal and call next immediately if no appeal exists" name="middleware/fetch-existing-appeal set empty appeal and call next immediately if no appeal exists" time="0.023">
    </testcase>
    <testcase classname="middleware/fetch-existing-appeal set empty appeal and call next immediately if no id set" name="middleware/fetch-existing-appeal set empty appeal and call next immediately if no id set" time="0.001">
    </testcase>
    <testcase classname="middleware/fetch-existing-appeal call next if api lookup fails" name="middleware/fetch-existing-appeal call next if api lookup fails" time="0">
    </testcase>
    <testcase classname="middleware/fetch-existing-appeal set session.appeal and call next if api call succeeds" name="middleware/fetch-existing-appeal set session.appeal and call next if api call succeeds" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="services/pdf.service" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:09" time="2.976" tests="7">
    <testcase classname="services/pdf.service getHtmlAppeal should throw if fetch fails" name="services/pdf.service getHtmlAppeal should throw if fetch fails" time="0.001">
    </testcase>
    <testcase classname="services/pdf.service getHtmlAppeal should throw if the remote API response is not ok" name="services/pdf.service getHtmlAppeal should throw if the remote API response is not ok" time="0.052">
    </testcase>
    <testcase classname="services/pdf.service getHtmlAppeal should throw if the response code is anything other than a 202" name="services/pdf.service getHtmlAppeal should throw if the response code is anything other than a 202" time="0.001">
    </testcase>
    <testcase classname="services/pdf.service getHtmlAppeal should return the expected response if the fetch status is 200" name="services/pdf.service getHtmlAppeal should return the expected response if the fetch status is 200" time="0">
    </testcase>
    <testcase classname="services/pdf.service storePdfAppeal should throw if the get html appeal API response is not ok" name="services/pdf.service storePdfAppeal should throw if the get html appeal API response is not ok" time="0.001">
    </testcase>
    <testcase classname="services/pdf.service storePdfAppeal should throw if the create document API response is not ok" name="services/pdf.service storePdfAppeal should throw if the create document API response is not ok" time="0">
    </testcase>
    <testcase classname="services/pdf.service storePdfAppeal should return the expected response if no error were triggered fetch status is 200" name="services/pdf.service storePdfAppeal should return the expected response if no error were triggered fetch status is 200" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="validators/appellant-submission/submission" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:12" time="3.594" tests="5">
    <testcase classname="validators/appellant-submission/submission rules is configured with the expected rules" name="validators/appellant-submission/submission rules is configured with the expected rules" time="0.003">
    </testcase>
    <testcase classname="validators/appellant-submission/submission rules should have the expected number of configured rules" name="validators/appellant-submission/submission rules should have the expected number of configured rules" time="0">
    </testcase>
    <testcase classname="validators/appellant-submission/submission validator should return the expected validation outcome - undefined - empty" name="validators/appellant-submission/submission validator should return the expected validation outcome - undefined - empty" time="0.011">
    </testcase>
    <testcase classname="validators/appellant-submission/submission validator should return the expected validation outcome - invalid value - fail" name="validators/appellant-submission/submission validator should return the expected validation outcome - invalid value - fail" time="0.002">
    </testcase>
    <testcase classname="validators/appellant-submission/submission validator should return the expected validation outcome - valid value - &quot;i-agree&quot; - pass" name="validators/appellant-submission/submission validator should return the expected validation outcome - valid value - &quot;i-agree&quot; - pass" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validators/cookies" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:15" time="1.914" tests="7">
    <testcase classname="validators/cookies rules is configured with the expected rules" name="validators/cookies rules is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/cookies rules ruleUsageCookie is configured with the expected rules" name="validators/cookies rules ruleUsageCookie is configured with the expected rules" time="0.001">
    </testcase>
    <testcase classname="validators/cookies validator should return the expected validation outcome - No selection made as to cookie usage - valid, not a required field" name="validators/cookies validator should return the expected validation outcome - No selection made as to cookie usage - valid, not a required field" time="0">
    </testcase>
    <testcase classname="validators/cookies validator should return the expected validation outcome - Invalid - value provided but not an allowable value" name="validators/cookies validator should return the expected validation outcome - Invalid - value provided but not an allowable value" time="0.001">
    </testcase>
    <testcase classname="validators/cookies validator should return the expected validation outcome - Usage cookie is agreed" name="validators/cookies validator should return the expected validation outcome - Usage cookie is agreed" time="0">
    </testcase>
    <testcase classname="validators/cookies validator should return the expected validation outcome - Usage cookie is not agreed" name="validators/cookies validator should return the expected validation outcome - Usage cookie is not agreed" time="0">
    </testcase>
    <testcase classname="validators/cookies validUsageCookieOptions should define the expected valid usage cookie options" name="validators/cookies validUsageCookieOptions should define the expected valid usage cookie options" time="0">
    </testcase>
  </testsuite>
  <testsuite name="middleware/remove-unwanted-cookies" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:12" time="3.352" tests="5">
    <testcase classname="middleware/remove-unwanted-cookies req.cookies is undefined" name="middleware/remove-unwanted-cookies req.cookies is undefined" time="0">
    </testcase>
    <testcase classname="middleware/remove-unwanted-cookies req.cookies is set but the interesting key does not exist" name="middleware/remove-unwanted-cookies req.cookies is set but the interesting key does not exist" time="0.017">
    </testcase>
    <testcase classname="middleware/remove-unwanted-cookies req.cookies[cookieConfig.COOKIE_POLICY_KEY] is set but the value is not JSON" name="middleware/remove-unwanted-cookies req.cookies[cookieConfig.COOKIE_POLICY_KEY] is set but the value is not JSON" time="0.001">
    </testcase>
    <testcase classname="middleware/remove-unwanted-cookies req.cookies[cookieConfig.COOKIE_POLICY_KEY] is set and usage is enabled" name="middleware/remove-unwanted-cookies req.cookies[cookieConfig.COOKIE_POLICY_KEY] is set and usage is enabled" time="0">
    </testcase>
    <testcase classname="middleware/remove-unwanted-cookies req.cookies[cookieConfig.COOKIE_POLICY_KEY] is set and usage is disabled" name="middleware/remove-unwanted-cookies req.cookies[cookieConfig.COOKIE_POLICY_KEY] is set and usage is disabled" time="0">
    </testcase>
  </testsuite>
  <testsuite name="middleware/combine-date-inputs" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:16" time="2.906" tests="5">
    <testcase classname="middleware/combine-date-inputs should return early if `req.body` is not set" name="middleware/combine-date-inputs should return early if `req.body` is not set" time="0.001">
    </testcase>
    <testcase classname="middleware/combine-date-inputs should return early if no date inputs" name="middleware/combine-date-inputs should return early if no date inputs" time="0">
    </testcase>
    <testcase classname="middleware/combine-date-inputs should set the correct empty date if fields are empty" name="middleware/combine-date-inputs should set the correct empty date if fields are empty" time="0.001">
    </testcase>
    <testcase classname="middleware/combine-date-inputs should set the full date if fields are not empty" name="middleware/combine-date-inputs should set the full date if fields are not empty" time="0">
    </testcase>
    <testcase classname="middleware/combine-date-inputs should return multiple dates if multiple date inputs used" name="middleware/combine-date-inputs should return multiple dates if multiple date inputs used" time="0">
    </testcase>
  </testsuite>
  <testsuite name="lib/planning-departments-to-nunjucks-list-items" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:18" time="5.54" tests="4">
    <testcase classname="lib/planning-departments-to-nunjucks-list-items departmentsToNunjucksItems should return the expected items list - empty list" name="lib/planning-departments-to-nunjucks-list-items departmentsToNunjucksItems should return the expected items list - empty list" time="0.001">
    </testcase>
    <testcase classname="lib/planning-departments-to-nunjucks-list-items departmentsToNunjucksItems should return the expected items list - one item, not selected" name="lib/planning-departments-to-nunjucks-list-items departmentsToNunjucksItems should return the expected items list - one item, not selected" time="0">
    </testcase>
    <testcase classname="lib/planning-departments-to-nunjucks-list-items departmentsToNunjucksItems should return the expected items list - two items, invalid selection" name="lib/planning-departments-to-nunjucks-list-items departmentsToNunjucksItems should return the expected items list - two items, invalid selection" time="0">
    </testcase>
    <testcase classname="lib/planning-departments-to-nunjucks-list-items departmentsToNunjucksItems should return the expected items list - three items, valid selection" name="lib/planning-departments-to-nunjucks-list-items departmentsToNunjucksItems should return the expected items list - three items, valid selection" time="0">
    </testcase>
  </testsuite>
  <testsuite name="lib/appeal-site-address-to-array" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:21" time="5.651" tests="8">
    <testcase classname="lib/appeal-site-address-to-array should format the address as expected - full address" name="lib/appeal-site-address-to-array should format the address as expected - full address" time="0.001">
    </testcase>
    <testcase classname="lib/appeal-site-address-to-array should format the address as expected - minimum viable address" name="lib/appeal-site-address-to-array should format the address as expected - minimum viable address" time="0">
    </testcase>
    <testcase classname="lib/appeal-site-address-to-array should format the address as expected - address line 2 is missing" name="lib/appeal-site-address-to-array should format the address as expected - address line 2 is missing" time="0.001">
    </testcase>
    <testcase classname="lib/appeal-site-address-to-array should format the address as expected - town / city is missing is missing" name="lib/appeal-site-address-to-array should format the address as expected - town / city is missing is missing" time="0">
    </testcase>
    <testcase classname="lib/appeal-site-address-to-array should format the address as expected - undefined returns empty array" name="lib/appeal-site-address-to-array should format the address as expected - undefined returns empty array" time="0">
    </testcase>
    <testcase classname="lib/appeal-site-address-to-array should format the address as expected - empty object returns empty array" name="lib/appeal-site-address-to-array should format the address as expected - empty object returns empty array" time="0">
    </testcase>
    <testcase classname="lib/appeal-site-address-to-array should format the address as expected - unset appeal.appealSiteSection returns empty array" name="lib/appeal-site-address-to-array should format the address as expected - unset appeal.appealSiteSection returns empty array" time="0">
    </testcase>
    <testcase classname="lib/appeal-site-address-to-array should format the address as expected - unset appeal.appealSiteSection.siteAddress returns empty array" name="lib/appeal-site-address-to-array should format the address as expected - unset appeal.appealSiteSection.siteAddress returns empty array" time="0">
    </testcase>
  </testsuite>
  <testsuite name="services/task-status/status-appeal-site-address" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:23" time="3.671" tests="5">
    <testcase classname="services/task-status/status-appeal-site-address should return the expected status - NOT STARTED - Not started by default" name="services/task-status/status-appeal-site-address should return the expected status - NOT STARTED - Not started by default" time="0.001">
    </testcase>
    <testcase classname="services/task-status/status-appeal-site-address should return the expected status - NOT STARTED - Requires postcode" name="services/task-status/status-appeal-site-address should return the expected status - NOT STARTED - Requires postcode" time="0">
    </testcase>
    <testcase classname="services/task-status/status-appeal-site-address should return the expected status - NOT STARTED - Requires addressLine1" name="services/task-status/status-appeal-site-address should return the expected status - NOT STARTED - Requires addressLine1" time="0.007">
    </testcase>
    <testcase classname="services/task-status/status-appeal-site-address should return the expected status - NOT STARTED - Empty strings are not valid" name="services/task-status/status-appeal-site-address should return the expected status - NOT STARTED - Empty strings are not valid" time="0.001">
    </testcase>
    <testcase classname="services/task-status/status-appeal-site-address should return the expected status - COMPLETED - Happy path" name="services/task-status/status-appeal-site-address should return the expected status - COMPLETED - Happy path" time="0">
    </testcase>
  </testsuite>
  <testsuite name="lib/client-side/cookie/cookie-consent-rejected" errors="0" failures="0" skipped="0" timestamp="2021-09-19T20:21:24" time="6.817" tests="6">
    <testcase classname="lib/client-side/cookie/cookie-consent-rejected banner is showing hideConsentRejectedBanner" name="lib/client-side/cookie/cookie-consent-rejected banner is showing hideConsentRejectedBanner" time="0.077">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent-rejected banner is showing showCookieConsentRejectedBanner" name="lib/client-side/cookie/cookie-consent-rejected banner is showing showCookieConsentRejectedBanner" time="0.007">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent-rejected banner is showing addCookieConsentRejectedListener" name="lib/client-side/cookie/cookie-consent-rejected banner is showing addCookieConsentRejectedListener" time="0.119">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent-rejected banner is hidden hideConsentRejectedBanner" name="lib/client-side/cookie/cookie-consent-rejected banner is hidden hideConsentRejectedBanner" time="0.025">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent-rejected banner is hidden showCookieConsentRejectedBanner" name="lib/client-side/cookie/cookie-consent-rejected banner is hidden showCookieConsentRejectedBanner" time="0.002">
    </testcase>
    <testcase classname="lib/client-side/cookie/cookie-consent-rejected banner is hidden addCookieConsentRejectedListener" name="lib/client-side/cookie/cookie-consent-rejected banner is hidden addCookieConsentRejectedListener" time="0.093">
    </testcase>
  </testsuite>
</testsuites>