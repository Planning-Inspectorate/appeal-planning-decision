{% extends "../layouts/main.njk" %}

{%- from "govuk/components/file-upload/macro.njk" import govukFileUpload -%}
{%- from "govuk/components/button/macro.njk" import govukButton -%}
{%- from "govuk/components/error-summary/macro.njk" import govukErrorSummary -%}
{%- from "govuk/components/inset-text/macro.njk" import govukInsetText -%}
{%- from "components/multi-file-upload/macro.njk" import mojMultiFileUpload -%}
{% from "components/save-and-return/macro.njk" import saveAndReturnButton %}

{% set title = "Any other documents to support your appeal - Appeal a planning decision - GOV.UK" %}

{% set supportingDocumentsErrorMessage %}
  {% if errorSummary %}
    {%- for error in errorSummary -%}
      {{- error.text -}}<br>
    {%- endfor -%}
  {% endif %}
{% endset %}

{% set uploadHtml %}
  {{ govukFileUpload({
    id: "supporting-documents",
    name: "supporting-documents",
    classes: 'moj-multi-file-upload__input',
    label: {
      text: "Upload files (optional)",
      classes: 'govuk-label--m'
    },
    attributes: { multiple: '' },
    errorMessage: errorSummary and {
      html: supportingDocumentsErrorMessage
    }
  }) }}

  {{govukButton({
    text: 'Upload file',
    classes: 'govuk-button--secondary moj-multi-file-upload__button',
    name: 'upload-and-remain-on-page',
    value: 'upload-and-remain-on-page',
    attributes: { "data-cy":"button-upload-file"}
  })}}
{% endset %}

{% block pageTitle %}
  {% if errors %}
    {% set title="Error: " + title %}
  {% endif %}
  {{ title }}
{% endblock %}

{% block content %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

      {% if errorSummary %}
        {{ govukErrorSummary({
          titleText: "There is a problem",
          errorList: errorSummary
        }) }}
      {% endif %}

      <form action="" method="post" novalidate encType="multipart/form-data" id="document-upload-form">
        <span class="govuk-caption-l">Your appeal</span>
        <h1 class="govuk-heading-l">
          Any other documents to support your appeal
        </h1>
        <p>If you have referred to any documents in your appeal statement, for example photographs, upload them here.</p>
        <p>You do not need to upload the plans from your original planning application.</p>

        {{ govukInsetText({
          text: "File size should be no more than " + fileSizeLimits.supportingDocumentsMaxFileSize | formatBytes
        }) }}

        {{ mojMultiFileUpload({
          uploadedFiles: {
            heading: { text: 'Files added' },
            items: appeal.yourAppealSection.otherDocuments.uploadedFiles
          },
          uploadHtml: uploadHtml
        }) }}

        <div class="govuk-button-group">
					{{ govukButton({
						text: "Save and continue",
						type: "submit",
						attributes: { "data-cy":"button-save-and-continue"}
					}) }}
					{{ saveAndReturnButton() }}
				</div>
      </form>
    </div>
  </div>
{% endblock %}

{% block bodyEnd %}
  {% block scripts %}
    {% block pageScripts %}
			<script src="/assets/jquery.js"></script>
			<script src="/assets/mojfrontend/all.js"></script>
			<script>
				if (MOJFrontend && typeof MOJFrontend.MultiFileUpload !== 'undefined') {
					new MOJFrontend.MultiFileUpload({
						container: $('.moj-multi-file-upload'),
						uploadUrl: '',
						deleteUrl: ''
					});

					MOJFrontend.MultiFileUpload.prototype.uploadFiles = function(files) {

						$('#document-upload-form')[0].requestSubmit();

						/*
						const formData = new FormData();

						for (var i = 0; i < files.length; i++) {
							var file = files.item(i);
							formData.append('supporting-documents', file);

							var item = $(this.getFileRowHtml(file));
							this.feedbackContainer.find('.moj-multi-file-upload__list').append(item);
						}

						$.ajax({
							url: document.location.pathname,
							type: 'post',
							data: formData,
							processData: false,
							contentType: false,
							success: $.proxy(function(response){
								if (response.error) {
									item.find('.moj-multi-file-upload__message').html(this.getErrorHtml(response.error));
									this.status.html(response.error.message);
								} else if (response.success) {
									item.find('.moj-multi-file-upload__message').html(this.getSuccessHtml(response.success));
									this.status.html(response.success.messageText);
								}

								if (response.file) {
									item.find('.moj-multi-file-upload__actions').append(this.getDeleteButtonHtml(response.file));
								}

								this.params.uploadFileExitHook(this, file, response);
							}, this),
							error: $.proxy(function(jqXHR, textStatus, errorThrown) {
								this.params.uploadFileErrorHook(this, file, jqXHR, textStatus, errorThrown);
							}, this),
							xhr: function() {
								var xhr = new XMLHttpRequest();
								xhr.upload.addEventListener('progress', function(e) {
									if (e.lengthComputable) {
										var percentComplete = e.loaded / e.total;
										percentComplete = parseInt(percentComplete * 100, 10);
										item.find('.moj-multi-file-upload__progress').text(' ' + percentComplete + '%');
									}
								}, false);
								return xhr;
							}
						});
						*/
					};
				}
			</script>
		{% endblock %}
  {% endblock %}
{% endblock %}
