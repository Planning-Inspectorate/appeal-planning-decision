parameters:
  - name: Environment
    type: string
    default: 'dev'
    values: ['dev', 'test']

  - name: RunParallel
    type: boolean
    default: false   # default = single agent for scheduled runs

  # Used in script env block but previously undefined
  - name: SmokeOnly
    type: boolean
    default: false

variables:
  - name: APP
    value: 'appeals'
  - group: e2e-${{ parameters.Environment }}
  # Ensure consistent Cypress binary cache path (aligns with where Cypress actually stores binaries on Linux agents)
  - name: CYPRESS_CACHE_FOLDER
    value: '$(Pipeline.Workspace)/cypress-cache'

pr: none
trigger: none

# schedules:
#   - cron: "0 2 * * 1-5"
#     displayName: Weekday test run
#     branches:
#       include: [main]
#     always: true

jobs:
  - job: Run_Cypress_Tests_For_Appeals
    timeoutInMinutes: 90
    pool: pins-odt-agent-pool-tests

    strategy:
      # ðŸŸ¢ PARALLEL RUNS (manual toggle)
      ${{ if eq(parameters.RunParallel, true) }}:
        matrix:
          group1:
            SPEC: cypress/e2e/onboarded-lpa-check.cy.js,cypress/e2e/appellant-aapd/submit-full-appeal/submit-full-appeal-nodecision.cy.js,cypress/e2e/appellant-aapd/submit-full-appeal/submit-full-appeal-granted.cy.js,cypress/e2e/appellant-aapd/submit-full-appeal/submit-full-appeal-refused.cy.js,cypress/e2e/appellant-aapd/submit-full-appeal/submit-full-appeal-validation.cy.js,cypress/e2e/lpa-manage-appeals/full-appeal-questionnaire-validation.cy.js,cypress/e2e/lpa-manage-appeals/full-appeal-questionnaire.cy.js,cypress/e2e/lpa-manage-appeals/full-appeal-statement-validation.cy.js,cypress/e2e/lpa-manage-appeals/full-appeal-statement.cy.js,cypress/e2e/lpa-manage-appeals/full-appeal-final-comment-validation.cy.js,cypress/e2e/lpa-manage-appeals/full-appeal-final-comment.cy.js,cypress/e2e/appellant-aapd/full-appeal-appellant-final-comment-validation.cy.js,cypress/e2e/appellant-aapd/full-appeal-appellant-final-comment.cy.js,cypress/e2e/appellant-aapd/appeallant-decided-appeals.cy.js,cypress/e2e/lpa-manage-appeals/lpa-decided-appeals.cy.js
          group2:
            SPEC: cypress/e2e/appellant-aapd/submit-householder-appeal/submit-householder-appeal-nodecision.cy.js,cypress/e2e/appellant-aapd/submit-householder-appeal/submit-householder-appeal-refused.cy.js,cypress/e2e/appellant-aapd/submit-householder-appeal/submit-householder-appeal-validation.cy.js,cypress/e2e/lpa-manage-appeals/house-holder-questionnaire-validation.cy.js,cypress/e2e/lpa-manage-appeals/house-holder-questionnaire.cy.js
          group3:
            SPEC: cypress/e2e/appellant-aapd/submit-listed-building-appeal/submit-listed-building-granted.cy.js,cypress/e2e/appellant-aapd/submit-listed-building-appeal/submit-listed-building-nodecision.cy.js,cypress/e2e/appellant-aapd/submit-listed-building-appeal/submit-listed-building-refused.cy.js,cypress/e2e/lpa-manage-appeals/listed-building-questionnaire.cy.js,cypress/e2e/lpa-manage-appeals/listed-building-statement.cy.js,cypress/e2e/lpa-manage-appeals/listed-building-final-comment.cy.js,cypress/e2e/ip-comments/ip-comments.cy.js

      # ðŸŸ¡ SINGLE AGENT RUN (default)
      ${{ if eq(parameters.RunParallel, false) }}:
        matrix:
          single:
            SPEC: cypress/e2e/**/*.cy.js

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "22.x"
        displayName: "Install Node.js"

      - task: Cache@2
        displayName: 'Cache Cypress binary'
        inputs:
          key: 'cypress | $(Agent.OS) | 13.x'
          path: '$(CYPRESS_CACHE_FOLDER)'
          restoreKeys: |
            cypress | $(Agent.OS)

      # Replacing above ShellScript with a resilient inline Bash step because the referenced path does not exist in repo.
      - task: Bash@3
        displayName: 'Install Chromium (Linux only)'
        condition: eq(variables['Agent.OS'], 'Linux')
        inputs:
          targetType: inline
          script: |
            set -euo pipefail
            echo "Attempting Chromium installation on Linux agent"
            if command -v chromium-browser >/dev/null 2>&1 || command -v google-chrome >/dev/null 2>&1; then
              echo "Chromium/Chrome already present; skipping apt install.";
            else
              echo "Installing Chromium via apt-get";
              sudo apt-get update -y || true
              sudo apt-get install -y chromium-browser || sudo apt-get install -y chromium || {
                echo "Chromium install failed"; exit 1; }
            fi
            # Export CHROME_BIN for Cypress (non-fatal if not found)
            CHROME_BIN=$(command -v chromium-browser || command -v chromium || command -v google-chrome || true)
            if [ -n "$CHROME_BIN" ]; then
              echo "Found Chrome/Chromium binary at: $CHROME_BIN"
              echo "##vso[task.setvariable variable=CHROME_BIN]$CHROME_BIN"
            else
              echo "Warning: Chrome/Chromium binary not found after installation attempt.";
            fi

      - task: Npm@1
        inputs:
          command: "install"
          workingDir: $(System.DefaultWorkingDirectory)/test-packages/platform-feature-tests
        displayName: "Install Dependencies"

      - script: |
          echo "Installing Cypress binary (explicit)"
          npx cypress install --cache-folder $(CYPRESS_CACHE_FOLDER)
          echo "Verifying Cypress binary"
          npx cypress verify --cache-folder $(CYPRESS_CACHE_FOLDER) || echo "Verification non-zero, continuing"
        workingDirectory: $(System.DefaultWorkingDirectory)/test-packages/platform-feature-tests
        displayName: "Install Cypress Binary"

      - script: |
          echo "Running Cypress specs: $(SPEC)"
          npx cypress run --cache-folder $(CYPRESS_CACHE_FOLDER) --spec "$(SPEC)"
        workingDirectory: $(System.DefaultWorkingDirectory)/test-packages/platform-feature-tests
        env:
          CYPRESS_APPEALS_BETA_BASE_URL: $(CYPRESS_APPEALS_BETA_BASE_URL)
          CYPRESS_BACK_OFFICE_BASE_URL: $(CYPRESS_BACK_OFFICE_BASE_URL)
          AUTH_EMAIL: $(AUTH_EMAIL)
          AUTH_PASSWORD: $(AUTH_PASSWORD)
          CASE_ADMIN_EMAIL: $(CASE_ADMIN_EMAIL)
          SPEC: $(SPEC)
          SMOKE_ONLY: ${{ parameters.SmokeOnly }}
          OS_NAME: $(OS_NAME)
          CYPRESS_CACHE_FOLDER: $(CYPRESS_CACHE_FOLDER)
          PUPPETEER_CACHE_DIR: $(PUPPETEER_CACHE_DIR)
          CHROME_BIN: $(CHROME_BIN)
        displayName: "Run Cypress Tests"        

      - task: PublishBuildArtifacts@1
        condition: failed()
        inputs:
          pathToPublish: 'test-packages/platform-feature-tests/cypress/reports/screenshots'
          artifactName: 'FailedTests'
        displayName: "Publish Failed Tests Artifacts"