parameters:
  - name: Environment
    type: string
    default: 'Test'
    values:
      - 'dev'
      - 'test'
      - 'staging'
  - name: SmokeOnly
    type: boolean
    default: true
  - name: RunMode
    type: string
    default: 'manual'
    values: ['manual','auto'] # manual = explicit spec lists per group; auto = even split by index
  - name: ManualGroups
    type: object
    default:
      group1: { SPEC: 'cypress/e2e/appellant-aapd/submit-full-appeal/submit-full-appeal-nodecision.cy.js,cypress/e2e/appellant-aapd/submit-full-appeal/submit-full-appeal-granted.cy.js,cypress/e2e/appellant-aapd/submit-full-appeal/submit-full-appeal-refused.cy.js,cypress/e2e/appellant-aapd/submit-full-appeal/submit-full-appeal-validation.cy.js,cypress/e2e/appellant-aapd/appeallant-decided-appeals.cy.js' }
      group2: { SPEC: 'cypress/e2e/appellant-aapd/submit-householder-appeal/submit-householder-appeal-nodecision.cy.js,cypress/e2e/appellant-aapd/submit-householder-appeal/submit-householder-appeal-refused.cy.js,cypress/e2e/appellant-aapd/submit-householder-appeal/submit-householder-appeal-validation.cy.js'}
      group3: { SPEC: 'cypress/e2e/lpa-manage-appeals/full-appeal-questionnaire.cy.js,cypress/e2e/rule-6-appeals/full-appeal-statement.cy.js,,cypress/e2e/ip-comments/ip-comments.cy.js' }
  - name: AutoSpecGlob
    type: string
    default: 'cypress/e2e/**/*.cy.js'
  - name: AutoTotalGroups
    type: number
    default: 3

variables:
  - name: APP
    value: 'appeals'
  - group: e2e
  - group: e2e-${{ parameters.Environment }}

pr: none
trigger: none

# Example schedule (uncomment to enable regular runs)
# schedules:
#   - cron: '0 2 * * 1-5'
#     displayName: Weekday test run
#     branches:
#       include: [ main ]
#     always: true

jobs:
  # Manual grouping matrix (explicit spec lists). Adjust parameters.ManualGroups to rebalance.
  - ${{ if eq(parameters.RunMode, 'manual') }}:
    - job: Cypress_Manual_Groups
      timeoutInMinutes: 90
      displayName: 'Cypress E2E (manual groups)'
      pool: pins-odt-agent-pool-tests
      strategy:
        matrix:
          ${{ each pair in parameters.ManualGroups }}:
            ${{ pair.Key }}:
              SPEC: ${{ pair.Value.SPEC }}
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '22.x'
          displayName: 'Install Node.js'

        - task: Npm@1
          inputs:
            command: 'install'
            workingDir: $(System.DefaultWorkingDirectory)/test-packages/platform-feature-tests
          displayName: 'Install Dependencies'

        - task: ShellScript@2
          inputs:
            scriptPath: 'test-packages/platform-feature-tests/install-chromium.sh'
          displayName: 'Install Chromium'
          condition: eq(variables['agent.os'], 'Linux')

        - task: Bash@3
          displayName: 'Run Cypress (manual group)'
          env:
            CYPRESS_APPEALS_BETA_BASE_URL: $(CYPRESS_APPEALS_BETA_BASE_URL)
            CYPRESS_BACK_OFFICE_BASE_URL: $(CYPRESS_BACK_OFFICE_BASE_URL)
            AUTH_EMAIL: $(AUTH_EMAIL)
            AUTH_PASSWORD: $(AUTH_PASSWORD)
            CASE_ADMIN_EMAIL: $(CASE_ADMIN_EMAIL)
            SPEC: $(SPEC)
            SMOKE_ONLY: ${{ parameters.SmokeOnly }}
          inputs:
            targetType: inline
            script: |
              set -euo pipefail
              cd test-packages/platform-feature-tests
              echo "Specs for this group:" $SPEC
              if [[ "$SMOKE_ONLY" == "true" ]]; then
                GREP_TAGS="smoke"
              else
                GREP_TAGS="-smoke"
              fi
              npx cypress verify
              npx cypress run --spec "$SPEC" --env grepTags="$GREP_TAGS"

        - task: PublishBuildArtifacts@1
          condition: failed()
          inputs:
            pathToPublish: 'test-packages/platform-feature-tests/cypress/reports'
            artifactName: 'FailedTests-$(System.JobDisplayName)'
          displayName: 'Publish Failed Tests (group)'

  # Automatic even split of specs across groups.
  - ${{ if eq(parameters.RunMode, 'auto') }}:
    - job: Cypress_Auto_Groups
      timeoutInMinutes: 90
      displayName: 'Cypress E2E (auto ${ { parameters.AutoTotalGroups } } groups)'
      pool: pins-odt-agent-pool-tests
      strategy:
        matrix:
          ${{ each i in range(0, parameters.AutoTotalGroups) }}:
            group${{ i }}:
              GROUP_INDEX: ${{ i }}
              TOTAL_GROUPS: ${{ parameters.AutoTotalGroups }}
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '22.x'
          displayName: 'Install Node.js'

        - task: Npm@1
          inputs:
            command: 'install'
            workingDir: $(System.DefaultWorkingDirectory)/test-packages/platform-feature-tests
          displayName: 'Install Dependencies'

        - task: ShellScript@2
          inputs:
            scriptPath: 'test-packages/platform-feature-tests/install-chromium.sh'
          displayName: 'Install Chromium'
          condition: eq(variables['agent.os'], 'Linux')

        - task: Bash@3
          displayName: 'Distribute & Run Cypress (auto group)'
          env:
            CYPRESS_APPEALS_BETA_BASE_URL: $(CYPRESS_APPEALS_BETA_BASE_URL)
            CYPRESS_BACK_OFFICE_BASE_URL: $(CYPRESS_BACK_OFFICE_BASE_URL)
            AUTH_EMAIL: $(AUTH_EMAIL)
            AUTH_PASSWORD: $(AUTH_PASSWORD)
            CASE_ADMIN_EMAIL: $(CASE_ADMIN_EMAIL)
            GROUP_INDEX: $(GROUP_INDEX)
            TOTAL_GROUPS: $(TOTAL_GROUPS)
            SPEC_GLOB: ${{ parameters.AutoSpecGlob }}
            SMOKE_ONLY: ${{ parameters.SmokeOnly }}
          inputs:
            targetType: inline
            script: |
              set -euo pipefail
              cd test-packages/platform-feature-tests
              echo "Auto grouping specs with glob: $SPEC_GLOB"
              mapfile -t ALL_SPECS < <(ls -1 $SPEC_GLOB 2>/dev/null | sort)
              COUNT=${#ALL_SPECS[@]}
              if [[ $COUNT -eq 0 ]]; then
                echo "No specs found for $SPEC_GLOB" >&2
                exit 1
              fi
              echo "Total specs discovered: $COUNT"
              SELECTED=()
              for i in "${!ALL_SPECS[@]}"; do
                mod=$(( i % TOTAL_GROUPS ))
                if [[ $mod -eq $GROUP_INDEX ]]; then
                  SELECTED+=("${ALL_SPECS[$i]}")
                fi
              done
              if [[ ${#SELECTED[@]} -eq 0 ]]; then
                echo "No specs assigned to this group index $GROUP_INDEX" >&2
                exit 1
              fi
              printf 'Assigned specs (%s):\n' "${#SELECTED[@]}"
              printf '  %s\n' "${SELECTED[@]}"
              SPEC_ARG=$(IFS=, ; echo "${SELECTED[*]}")
              if [[ "$SMOKE_ONLY" == "true" ]]; then
                GREP_TAGS="smoke"
              else
                GREP_TAGS="-smoke"
              fi
              npx cypress verify
              npx cypress run --spec "$SPEC_ARG" --env grepTags="$GREP_TAGS"

        - task: PublishBuildArtifacts@1
          condition: failed()
          inputs:
            pathToPublish: 'test-packages/platform-feature-tests/cypress/reports'
            artifactName: 'FailedTests-Group$(GROUP_INDEX)'
          displayName: 'Publish Failed Tests (auto group)'
